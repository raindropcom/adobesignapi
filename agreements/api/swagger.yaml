---
swagger: "2.0"
info:
  version: "6.0.0"
  title: "AdobeSign Aggreements API"
basePath: "/api/rest/v6"
paths:
  /agreements:
    get:
      summary: "Retrieves agreements for the user."
      operationId: "getAgreements"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "externalId"
        in: "query"
        description: "Case-sensitive ExternalID for which you would like to retrieve\
          \ agreement information. ExternalId is passed in the call to the agreement\
          \ creation API"
        required: false
        type: "string"
        x-exportParamName: "ExternalId"
        x-optionalDataType: "String"
      - name: "showHiddenAgreements"
        in: "query"
        description: "A query parameter to fetch all the hidden agreements along with\
          \ the visible agreements."
        required: false
        type: "boolean"
        x-exportParamName: "ShowHiddenAgreements"
        x-optionalDataType: "Bool"
      - name: "cursor"
        in: "query"
        description: "Used to navigate through the pages. If not provided, returns\
          \ the first page."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "pageSize"
        in: "query"
        description: "Number of intended items in the response page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/UserAgreements"
      security:
      - oauth2:
        - "agreement_read"
    post:
      summary: "Creates an agreement. Sends it out for signatures, and returns the\
        \ agreementID in the response to the client."
      description: "This is a primary endpoint which is used to create a new agreement.\
        \ An agreement can be created using transientDocument, libraryDocument or\
        \ a URL. You can create an agreement in one of the 3 mentioned states: a)\
        \ <b>DRAFT</b> - to incrementally build the agreement before sending out,\
        \ b) <b>AUTHORING</b> - to add/edit form fields in the agreement, c) <b>IN_PROCESS</b>\
        \ - to immediately send the agreement. You can use the PUT /agreements/{agreementId}/state\
        \ endpoint to transition an agreement between the above mentioned states.\
        \ An allowed transition would follow the following sequence: DRAFT -> AUTHORING\
        \ -> IN_PROCESS -> CANCELLED."
      operationId: "createAgreement"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - in: "body"
        name: "AgreementInfo"
        description: "Information about the agreement that you want to create."
        required: true
        schema:
          $ref: "#/definitions/AgreementInfo"
        x-exportParamName: "AgreementInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementCreationResponse"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}:
    get:
      summary: "Retrieves the current status of an agreement."
      operationId: "getAgreementInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementInfo"
      security:
      - oauth2:
        - "agreement_read"
    put:
      summary: "Updates the agreement in draft state."
      operationId: "updateAgreement"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "AgreementInfo"
        description: "Information necessary to update a modifiable agreement that\
          \ is presently out for signature."
        required: true
        schema:
          $ref: "#/definitions/AgreementInfo"
        x-exportParamName: "AgreementInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/auditTrail:
    get:
      summary: "Retrieves the audit trail of an agreement identified by agreementId."
      description: "PDF file stream containing audit trail information"
      operationId: "getAuditTrail"
      produces:
      - "application/pdf"
      - "application/pdf;encoding=base64"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            type: "string"
            format: "byte"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/combinedDocument:
    get:
      summary: "Retrieves a single combined PDF document for the documents associated\
        \ with an agreement."
      operationId: "getCombinedDocument"
      produces:
      - "application/pdf"
      - "application/pdf;encoding=base64"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "versionId"
        in: "query"
        description: "The version identifier of agreement as provided by the API which\
          \ retrieves information of a specific agreement. If not provided then latest\
          \ version will be used."
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "participantId"
        in: "query"
        description: "The participant identifier to be used to retrieve documents."
        required: false
        type: "string"
        x-exportParamName: "ParticipantId"
        x-optionalDataType: "String"
      - name: "attachSupportingDocuments"
        in: "query"
        description: "When set to true, attach corresponding supporting documents\
          \ to the signed agreement PDF. Default value of this parameter is true."
        required: false
        type: "boolean"
        x-exportParamName: "AttachSupportingDocuments"
        x-optionalDataType: "Bool"
      - name: "attachAuditReport"
        in: "query"
        description: "When set to true, attach an audit report to the signed agreement\
          \ PDF. Default value is false"
        required: false
        type: "boolean"
        x-exportParamName: "AttachAuditReport"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "No response was specified"
          schema:
            type: "string"
            format: "byte"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/combinedDocument/pagesInfo:
    get:
      summary: "Retrieves info of all pages of a combined PDF document for the documents\
        \ associated with an agreement."
      operationId: "getCombinedDocumentPagesInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "includeSupportingDocumentsPagesInfo"
        in: "query"
        description: "When set to true, returns info of all pages of supporting documents\
          \ as well. Else, return the info of pages of only the original document."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeSupportingDocumentsPagesInfo"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/CombinedDocumentPagesInfo"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/documents:
    get:
      summary: "Retrieves the IDs of the documents of an agreement identified by agreementId."
      operationId: "getAllDocuments"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "versionId"
        in: "query"
        description: "The version identifier of agreement as provided by the API which\
          \ retrieves information of a specific agreement. If not provided then latest\
          \ version will be used."
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "participantId"
        in: "query"
        description: "The participant identifier to be used to retrieve documents."
        required: false
        type: "string"
        x-exportParamName: "ParticipantId"
        x-optionalDataType: "String"
      - name: "supportingDocumentContentFormat"
        in: "query"
        description: "Content format of the supported documents. It can have two possible\
          \ values ORIGINAL or CONVERTED_PDF."
        required: false
        type: "string"
        enum:
        - "ORIGINAL"
        - "CONVERTED_PDF"
        x-exportParamName: "SupportingDocumentContentFormat"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementDocuments"
      security:
      - oauth2:
        - "agreement_read"
    delete:
      summary: "Deletes all the documents of an agreement."
      operationId: "deleteDocuments"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_retention')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_retention')\" target=\"\
          oauthDoc\">agreement_retention</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_retention"
  /agreements/{agreementId}/documents/imageUrls:
    get:
      summary: "Retrieves image urls of all visible pages of all the documents associated\
        \ with an agreement."
      operationId: "getAllDocumentsImageUrls"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "versionId"
        in: "query"
        description: "The version identifier of agreement as provided by the API which\
          \ retrieves information of a specific agreement. If not provided then latest\
          \ version will be used."
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "participantId"
        in: "query"
        description: "The participant identifier to be used to retrieve documents."
        required: false
        type: "string"
        x-exportParamName: "ParticipantId"
        x-optionalDataType: "String"
      - name: "imageSizes"
        in: "query"
        description: "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px,\
          \ FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT,\
          \ ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}.\
          \ Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px,\
          \ ZOOM_100_PERCENT}. "
        required: false
        type: "string"
        x-exportParamName: "ImageSizes"
        x-optionalDataType: "String"
      - name: "includeSupportingDocumentsImageUrls"
        in: "query"
        description: "When set to true, returns image urls of supporting documents\
          \ as well. Else, returns image urls of only the original documents."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeSupportingDocumentsImageUrls"
        x-optionalDataType: "Bool"
      - name: "showImageAvailabilityOnly"
        in: "query"
        description: "When set to true, returns only image availability. Else, returns\
          \ both image urls and its availability."
        required: false
        type: "boolean"
        x-exportParamName: "ShowImageAvailabilityOnly"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/DocumentsImageUrlsInfo"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/documents/{documentId}:
    get:
      summary: "Retrieves the file stream of a document of an agreement."
      operationId: "getDocument"
      produces:
      - "*/*"
      - "*/*;encoding=base64"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "documentId"
        in: "path"
        description: "The document identifier, as retrieved from the API which fetches\
          \ the documents of a specified agreement"
        required: true
        type: "string"
        x-exportParamName: "DocumentId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            type: "string"
            format: "byte"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/documents/{documentId}/imageUrls:
    get:
      summary: "Retrieves image urls of all visible pages of a document associated\
        \ with an agreement."
      operationId: "getDocumentImageUrls"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "documentId"
        in: "path"
        description: "The document identifier, as retrieved from the API which fetches\
          \ the documents of a specified agreement"
        required: true
        type: "string"
        x-exportParamName: "DocumentId"
      - name: "imageSizes"
        in: "query"
        description: "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px,\
          \ FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT,\
          \ ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}.\
          \ Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px,\
          \ ZOOM_100_PERCENT}. "
        required: false
        type: "string"
        x-exportParamName: "ImageSizes"
        x-optionalDataType: "String"
      - name: "showImageAvailabilityOnly"
        in: "query"
        description: "When set to true, returns only image availability. Else, returns\
          \ both image urls and its availability."
        required: false
        type: "boolean"
        x-exportParamName: "ShowImageAvailabilityOnly"
        x-optionalDataType: "Bool"
      - name: "startPage"
        in: "query"
        description: "Start of page number range for which imageUrls are requested.\
          \ Starting page number should be greater than 0."
        required: false
        type: "integer"
        x-exportParamName: "StartPage"
        x-optionalDataType: "Int32"
      - name: "endPage"
        in: "query"
        description: "End of page number range for which imageUrls are requested."
        required: false
        type: "integer"
        x-exportParamName: "EndPage"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementDocumentImageUrlsInfo"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/events:
    get:
      summary: "Retrieves the events information for an agreement."
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementEventList"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/formData:
    get:
      summary: "Retrieves data entered into the interactive form fields of the agreement."
      description: "This API can only be called by the creator of the agreement"
      operationId: "getFormData"
      produces:
      - "text/csv"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            type: "string"
            format: "byte"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/formFields:
    get:
      summary: "Retrieves details of form fields of an agreement."
      operationId: "getFormFields"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "participantEmail"
        in: "query"
        description: "The email address of the participant to be used to retrieve\
          \ its associated form fields."
        required: false
        type: "string"
        x-exportParamName: "ParticipantEmail"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementFormFields"
      security:
      - oauth2:
        - "agreement_read"
    post:
      summary: "Adds template fields to an agreement"
      operationId: "addTemplateFieldsToAgreement"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "FormFieldPostInfo"
        description: "List of form fields to add or replace"
        required: true
        schema:
          $ref: "#/definitions/FormFieldPostInfo"
        x-exportParamName: "FormFieldPostInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementFormFields"
      security:
      - oauth2:
        - "agreement_write"
    put:
      summary: "Updates form fields of an agreement."
      operationId: "updateFormFields"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "FormFieldPutInfo"
        description: "List of form fields to add or replace"
        required: true
        schema:
          $ref: "#/definitions/FormFieldPutInfo"
        x-exportParamName: "FormFieldPutInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementFormFields"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/formFields/mergeInfo:
    get:
      summary: "Retrieves the merge info stored with an agreement."
      operationId: "getMergeInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/FormFieldMergeInfo"
      security:
      - oauth2:
        - "agreement_read"
    put:
      summary: "Set the merge info for an agreement."
      operationId: "updateAgreementMergeInfo"
      produces:
      - "application/json"
      - "application/pdf"
      - "text/csv"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "FormFieldMergeInfo"
        description: "A mapping indicating the default values to set for form fields"
        required: true
        schema:
          $ref: "#/definitions/FormFieldMergeInfo"
        x-exportParamName: "FormFieldMergeInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/me/note:
    get:
      summary: "Retrieves the latest note associated with an agreement."
      operationId: "getAgreementNoteForApiUser"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/Note"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/me/visibility:
    put:
      summary: "Updates the visibility of an agreement."
      operationId: "updateAgreementVisibility"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "VisibilityInfo"
        description: "Information to update visibility of agreement"
        required: true
        schema:
          $ref: "#/definitions/VisibilityInfo"
        x-exportParamName: "VisibilityInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/members:
    get:
      summary: "Retrieves information of members of the agreement."
      operationId: "getAllMembers"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "includeNextParticipantSet"
        in: "query"
        description: "A query parameter to fetch next active participation members"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeNextParticipantSet"
        x-optionalDataType: "Bool"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/MembersInfo"
      security:
      - oauth2:
        - "agreement_read"
  /agreements/{agreementId}/members/participantSets/{participantSetId}:
    get:
      summary: "Retrieves the participant set of an agreement identified by agreementId\
        \ in the path."
      operationId: "getParticipantSet"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "participantSetId"
        in: "path"
        description: "The participant set identifier"
        required: true
        type: "string"
        x-exportParamName: "ParticipantSetId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/DetailedParticipantSetInfo"
      security:
      - oauth2:
        - "agreement_read"
    put:
      summary: "Updates the participant set of an agreement identified by agreementId\
        \ in the path."
      operationId: "updateParticipantSet"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "participantSetId"
        in: "path"
        description: "The participant set identifier"
        required: true
        type: "string"
        x-exportParamName: "ParticipantSetId"
      - in: "body"
        name: "DetailedParticipantSetInfo"
        description: "The new participant set info."
        required: true
        schema:
          $ref: "#/definitions/DetailedParticipantSetInfo"
        x-exportParamName: "DetailedParticipantSetInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/members/participantSets/{participantSetId}/delegatedParticipantSets:
    post:
      summary: "Creates a participantSet to which the agreement is forwarded for taking\_\
        appropriate action."
      description: "Participants marked as delegator can call this API endpoint."
      operationId: "createDelegatedParticipantSets"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "participantSetId"
        in: "path"
        description: "The participant set identifier"
        required: true
        type: "string"
        x-exportParamName: "ParticipantSetId"
      - in: "body"
        name: "DelegatedParticipantSetInfo"
        description: "Information about the delegate participant Set"
        required: true
        schema:
          $ref: "#/definitions/DelegatedParticipantSetInfo"
        x-exportParamName: "DelegatedParticipantSetInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/DelegationResponse"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/reject:
    put:
      summary: "Rejects the agreement for a participant."
      operationId: "rejectAgreementForParticipation"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "participantSetId"
        in: "path"
        description: "The participant set identifier"
        required: true
        type: "string"
        x-exportParamName: "ParticipantSetId"
      - name: "participantId"
        in: "path"
        description: "The participant identifier"
        required: true
        type: "string"
        x-exportParamName: "ParticipantId"
      - in: "body"
        name: "AgreementRejectionInfo"
        description: "Participant rejection information required for rejecting the\
          \ agreement"
        required: true
        schema:
          $ref: "#/definitions/AgreementRejectionInfo"
        x-exportParamName: "AgreementRejectionInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/members/share:
    post:
      summary: "Share an agreement with someone."
      operationId: "createShareOnAgreement"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "ShareCreationInfoList"
        description: "List of agreement share creation information objects."
        required: true
        schema:
          $ref: "#/definitions/ShareCreationInfoList"
        x-exportParamName: "ShareCreationInfoList"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/ShareCreationResponseList"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/reminders:
    get:
      summary: "Retrieves the reminders of an agreement, identified by agreementId\
        \ in the path."
      operationId: "getAgreementReminders"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - name: "status"
        in: "query"
        description: "A comma-separated list of reminder statuses of the reminders\
          \ which should be returned in the response. Currently supported values are\
          \ ACTIVE, CANCELED, COMPLETE"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/RemindersResponse"
      security:
      - oauth2:
        - "agreement_read"
    post:
      summary: "Creates a reminder on the specified participants of an agreement identified\
        \ by agreementId in the path."
      operationId: "createReminderOnParticipant"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "ReminderInfo"
        description: "The information about the reminder that you want to create on\
          \ the participantSet of the agreement."
        required: true
        schema:
          $ref: "#/definitions/ReminderInfo"
        x-exportParamName: "ReminderInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/ReminderCreationResult"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/signingUrls:
    get:
      summary: "Retrieves the URL for the e-sign page for the current signer(s) of\
        \ an agreement."
      operationId: "getSigningUrl"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/SigningUrlResponse"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/state:
    put:
      summary: "Updates the state of an agreement identified by agreementId in the\
        \ path."
      description: "This endpoint can be used by originator/sender of an agreement\
        \ to transition between the states of agreement. An allowed transition would\
        \ follow the following sequence: DRAFT -> AUTHORING -> IN_PROCESS -> CANCELLED."
      operationId: "updateAgreementState"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\"\
          >agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "AgreementStateInfo"
        required: true
        schema:
          $ref: "#/definitions/AgreementStateInfo"
        x-exportParamName: "AgreementStateInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "agreement_write"
  /agreements/{agreementId}/views:
    post:
      summary: "Retrieves the latest state view url of agreement."
      operationId: "createAgreementView"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\"\
          >agreement_read</a> - agreement read is always required</li><li style='list-style-type:\
          \ square'><a href=\"#\" onclick=\"this.href=oauthDoc('user_login')\" oncontextmenu=\"\
          this.href=oauthDoc('user_login')\" target=\"oauthDoc\">user_login</a> -\
          \ Required additionally if the autoLoginUser parameter is set to true</li></ul>in\
          \ the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "agreementId"
        in: "path"
        description: "The agreement identifier, as returned by the agreement creation\
          \ API or retrieved from the API to fetch agreements."
        required: true
        type: "string"
        x-exportParamName: "AgreementId"
      - in: "body"
        name: "AgreementViewInfo"
        description: "Name of the required view and its desired configuration."
        required: true
        schema:
          $ref: "#/definitions/AgreementViewInfo"
        x-exportParamName: "AgreementViewInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/AgreementViews"
      security:
      - oauth2:
        - "agreement_read"
        - "user_login"
definitions:
  AgreementCancellationInfo:
    properties:
      comment:
        type: "string"
        description: "An optional comment describing to the recipients why you want\
          \ to cancel the transaction"
      notifyOthers:
        type: "boolean"
        description: "Whether or not you would like the recipients to be notified\
          \ that the transaction has been cancelled. The default value is false"
  AgreementCcInfo:
    required:
    - "email"
    properties:
      email:
        type: "string"
        description: "Email of the CC participant of the agreement"
      label:
        type: "string"
        description: "Label of the CC list as returned in workflow description"
      visiblePages:
        type: "array"
        description: "When you enable limited document visibility (documentVisibilityEnabled),\
          \ you can specify which file (fileInfo) should be made visible to which\
          \ specific participant set.<br>Specify one or more label values of a fileInfos\
          \ element.<br>Each signer participant sets must contain at least one required\
          \ signature field in at least one visible file included in this API call;\
          \ if not a page with a signature field is automatically appended for any\
          \ missing participant sets. If there is a possibility that one or more participant\
          \ sets do not have a required signature field in the files included in the\
          \ API call, all signer participant sets should include a special index value\
          \ of '0' to make this automatically appended signature page visible to the\
          \ signer. Not doing so may result in an error. For all other roles, you\
          \ may omit this value to exclude this page."
        items:
          type: "string"
    example:
      visiblePages:
      - "visiblePages"
      - "visiblePages"
      label: "label"
      email: "email"
  AgreementCreationResponse:
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "The unique identifier of the agreement"
    description: "A JSON  that contains both the id of the newly created agreement\
      \ and URL / embedded code to direct the user to tne next step in the creation\
      \ process."
    example:
      id: "id"
  AgreementDocumentImageUrlsInfo:
    required:
    - "documentId"
    - "documentImageUrlsList"
    properties:
      documentId:
        type: "string"
        description: "Id of the document"
      documentImageUrlsList:
        type: "array"
        description: "A list of documents image URLs."
        items:
          $ref: "#/definitions/DocumentImageUrls"
    example:
      documentImageUrlsList:
      - imageURLs:
        - pageNumber: 0
          url: "url"
        - pageNumber: 0
          url: "url"
        imagesAvailable: true
        imageSize: "FIXED_WIDTH_50px"
      - imageURLs:
        - pageNumber: 0
          url: "url"
        - pageNumber: 0
          url: "url"
        imagesAvailable: true
        imageSize: "FIXED_WIDTH_50px"
      documentId: "documentId"
  AgreementDocuments:
    required:
    - "documents"
    properties:
      documents:
        type: "array"
        description: "A list of documents"
        items:
          $ref: "#/definitions/Document"
      supportingDocuments:
        type: "array"
        description: "A list of supporting documents"
        items:
          $ref: "#/definitions/SupportingDocument"
    example:
      documents:
      - numPages: 0
        name: "name"
        id: "id"
        label: "label"
        mimeType: "mimeType"
      - numPages: 0
        name: "name"
        id: "id"
        label: "label"
        mimeType: "mimeType"
      supportingDocuments:
      - displayLabel: "displayLabel"
        numPages: 0
        fieldName: "fieldName"
        id: "id"
        mimeType: "mimeType"
      - displayLabel: "displayLabel"
        numPages: 0
        fieldName: "fieldName"
        id: "id"
        mimeType: "mimeType"
  AgreementEvent:
    required:
    - "actingUserEmail"
    - "actingUserIpAddress"
    - "actingUserName"
    - "date"
    - "description"
    - "deviceLocation"
    - "devicePhoneNumber"
    - "digitalSignatureInfo"
    - "initiatingUserEmail"
    - "initiatingUserName"
    - "participantEmail"
    - "participantId"
    - "participantRole"
    - "synchronizationId"
    - "type"
    - "vaultEventId"
    - "vaultProviderName"
    - "versionId"
    properties:
      actingUserEmail:
        type: "string"
        description: "Email address of the user that created the event"
      actingUserIpAddress:
        type: "string"
        description: "The IP address of the user that created the event"
      actingUserName:
        type: "string"
        description: "The name of the acting user"
      comment:
        type: "string"
        description: "The event comment. For RECALLED or REJECTED, the reason given\
          \ by the user that initiates the event. For DELEGATE or SHARE, the message\
          \ from the acting user to the participant"
      date:
        type: "string"
        format: "date"
        description: "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ.\
          \ For example, e.g 2016-02-25T18:46:19Z represents UTC time"
      description:
        type: "string"
        description: "A description of the audit event"
      deviceLocation:
        description: "Location of the device that generated the event (This value\
          \ may be null due to limited privileges)"
        $ref: "#/definitions/DeviceLocation"
      devicePhoneNumber:
        type: "string"
        description: "Phone number from the device used when the participation is\
          \ completed on a mobile phone"
      digitalSignatureInfo:
        description: "This is present for ESIGNED events when the participation is\
          \ signed digitally"
        $ref: "#/definitions/DigitalSignatureInfo"
      initiatingUserEmail:
        type: "string"
        description: "Email address of the user that initiated the event on behalf\
          \ of the acting user when the account is shared. Will be empty if there\
          \ is no account sharing in effect"
      initiatingUserName:
        type: "string"
        description: "Full name of the user that initiated the event on behalf of\
          \ the acting user when the account is shared. Will be empty if there is\
          \ no account sharing in effect"
      participantEmail:
        type: "string"
        description: "Email address of the user that is the participant for the event.\
          \ This may be different than the acting user for certain event types. For\
          \ example, for a DELEGATION event, this is the user who was delegated to"
      participantId:
        type: "string"
        description: "The unique identifier of the participant for the event. This\
          \ may be different than the acting user for certain event types. For example,\
          \ for a DELEGATION event, this is the user who was delegated to"
      participantRole:
        type: "string"
        description: "Role assumed by all participants in the participant set the\
          \ participant belongs to (signer, approver etc.)."
        enum:
        - "SIGNER"
        - "DELEGATE_TO_SIGNER"
        - "APPROVER"
        - "DELEGATE_TO_APPROVER"
        - "ACCEPTOR"
        - "DELEGATE_TO_ACCEPTOR"
        - "FORM_FILLER"
        - "DELEGATE_TO_FORM_FILLER"
        - "CERTIFIED_RECIPIENT"
        - "DELEGATE_TO_CERTIFIED_RECIPIENT"
        - "SHARE"
        - "SENDER"
      synchronizationId:
        type: "string"
        description: "A unique identifier linking offline events to synchronization\
          \ events (specified for offline signing events and synchronization events,\
          \ else null)"
      type:
        type: "string"
        description: "Type of agreement event"
        enum:
        - "ACCESS_CODE_GENERATED"
        - "ACCESS_CODE_CONSUMED"
        - "AUTO_CANCELLED_CONVERSION_PROBLEM"
        - "ACTION_AUTO_DELEGATED"
        - "ACTION_COMPLETED"
        - "ACTION_COMPLETED_HOSTED"
        - "ACTION_COMPLETED_OFFLINE"
        - "ACTION_COMPLETED_OFFLINE_HOSTED"
        - "ACTION_COMPLETED_WIDGET_VERIFIED"
        - "ACTION_COMPLETED_WIDGET_VERIFIED_API_TOKEN"
        - "ACTION_COMPLETED_WIDGET_VERIFICATION_WAIVED"
        - "ACTION_DELEGATED"
        - "ACTION_REPLACED_SIGNER"
        - "ACTION_REQUESTED"
        - "CREATED"
        - "CREATED_FROM_WIDGET"
        - "CREATED_OFFLINE"
        - "CREATED_VIA_UPLOAD"
        - "CREATED_VIA_ACROBAT"
        - "CREATED_VIA_READER"
        - "ACTIVATED"
        - "DIGITAL_SIGN_UIDAI_SIGNER_CONSENT"
        - "DIGSIGNED"
        - "DEACTIVATED"
        - "DOCUMENTS_DELETED"
        - "DOWNLOADED"
        - "EMAIL_BOUNCED"
        - "EMAIL_VIEWED"
        - "EXPIRED"
        - "EXPIRED_AUTOMATICALLY"
        - "FAXED_BY_SENDER"
        - "FAXIN_RECEIVED"
        - "KBA_AUTHENTICATED"
        - "MODIFIED"
        - "OFFLINE_SYNC"
        - "OTHER"
        - "PAID"
        - "PRESIGNED"
        - "RECALLED"
        - "RECALLED_MAX_SIGNING_KBA_ATTEMPTS"
        - "RECALLED_MAX_SIGNING_PASSWORD_ATTEMPTS"
        - "RECALLED_MAX_SIGNING_PHONE_ATTEMPTS"
        - "REJECTED"
        - "SENDER_CREATED_NEW_REVISION"
        - "SHARED"
        - "SIGNED"
        - "SIGNING_URL_REQUESTED"
        - "UPLOADED_BY_SENDER"
        - "USER_ACK_AGREEMENT_MODIFIED"
        - "VAULTED"
        - "WEB_IDENTITY_AUTHENTICATED"
        - "WEB_IDENTITY_SPECIFIED"
        - "WRITTEN_DOWNLOAD"
        - "WRITTEN_SIGNED"
      vaultEventId:
        type: "string"
        description: "The identifier assigned by the vault provider for the vault\
          \ event (if vaulted, otherwise null)"
      vaultProviderName:
        type: "string"
        description: "Name of the vault provider for the vault event (if vaulted,\
          \ otherwise null)"
      versionId:
        type: "string"
        description: "An ID which uniquely identifies the version of the document\
          \ associated with this audit event"
    example:
      date: "2000-01-23"
      initiatingUserName: "initiatingUserName"
      description: "description"
      actingUserName: "actingUserName"
      actingUserIpAddress: "actingUserIpAddress"
      participantEmail: "participantEmail"
      type: "ACCESS_CODE_GENERATED"
      participantRole: "SIGNER"
      vaultEventId: "vaultEventId"
      participantId: "participantId"
      versionId: "versionId"
      actingUserEmail: "actingUserEmail"
      devicePhoneNumber: "devicePhoneNumber"
      initiatingUserEmail: "initiatingUserEmail"
      digitalSignatureInfo:
        name: "name"
        company: "company"
        email: "email"
      vaultProviderName: "vaultProviderName"
      comment: "comment"
      synchronizationId: "synchronizationId"
      deviceLocation:
        latitude: 0.8008282
        longitude: 6.0274563
  AgreementEventList:
    required:
    - "events"
    properties:
      events:
        type: "array"
        description: "An array of event objects."
        items:
          $ref: "#/definitions/AgreementEvent"
    example:
      events:
      - date: "2000-01-23"
        initiatingUserName: "initiatingUserName"
        description: "description"
        actingUserName: "actingUserName"
        actingUserIpAddress: "actingUserIpAddress"
        participantEmail: "participantEmail"
        type: "ACCESS_CODE_GENERATED"
        participantRole: "SIGNER"
        vaultEventId: "vaultEventId"
        participantId: "participantId"
        versionId: "versionId"
        actingUserEmail: "actingUserEmail"
        devicePhoneNumber: "devicePhoneNumber"
        initiatingUserEmail: "initiatingUserEmail"
        digitalSignatureInfo:
          name: "name"
          company: "company"
          email: "email"
        vaultProviderName: "vaultProviderName"
        comment: "comment"
        synchronizationId: "synchronizationId"
        deviceLocation:
          latitude: 0.8008282
          longitude: 6.0274563
      - date: "2000-01-23"
        initiatingUserName: "initiatingUserName"
        description: "description"
        actingUserName: "actingUserName"
        actingUserIpAddress: "actingUserIpAddress"
        participantEmail: "participantEmail"
        type: "ACCESS_CODE_GENERATED"
        participantRole: "SIGNER"
        vaultEventId: "vaultEventId"
        participantId: "participantId"
        versionId: "versionId"
        actingUserEmail: "actingUserEmail"
        devicePhoneNumber: "devicePhoneNumber"
        initiatingUserEmail: "initiatingUserEmail"
        digitalSignatureInfo:
          name: "name"
          company: "company"
          email: "email"
        vaultProviderName: "vaultProviderName"
        comment: "comment"
        synchronizationId: "synchronizationId"
        deviceLocation:
          latitude: 0.8008282
          longitude: 6.0274563
  AgreementFormFields:
    required:
    - "fields"
    properties:
      fields:
        type: "array"
        description: "List of the form fields in an agreement"
        items:
          $ref: "#/definitions/FormField"
    description: "A JSON list of all of the fields for a form"
    example:
      fields:
      - radioCheckType: "CIRCLE"
        borderColor: "borderColor"
        valueExpression: "valueExpression"
        maskingText: "maskingText"
        defaultValue: "defaultValue"
        masked: true
        minLength: 4
        origin: "AUTHORED"
        tooltip: "tooltip"
        hiddenOptions:
        - "hiddenOptions"
        - "hiddenOptions"
        required: true
        validationData: "validationData"
        minValue: 7.3862819483858839220147274318151175975799560546875
        borderWidth: 0.80082819046101150206595775671303272247314453125
        inputType: "TEXT_FIELD"
        borderStyle: "SOLID"
        calculated: true
        contentType: "DATA"
        validation: "NONE"
        displayLabel: "displayLabel"
        hyperlink:
          linkType: "INTERNAL"
          documentLocation:
            pageNumber: 2
            top: 7.061401241503109105224211816675961017608642578125
            left: 5.63737665663332876420099637471139430999755859375
            width: 9.301444243932575517419536481611430644989013671875
            height: 5.962133916683182377482808078639209270477294921875
          url: "url"
        backgroundColor: "backgroundColor"
        visible: true
        displayFormatType: "DEFAULT"
        maxValue: 2.027123023002321833274663731572218239307403564453125
        validationErrMsg: "validationErrMsg"
        displayFormat: "displayFormat"
        visibleOptions:
        - "visibleOptions"
        - "visibleOptions"
        readOnly: true
        fontName: "fontName"
        conditionalAction:
          predicates:
          - fieldName: "fieldName"
            value: "value"
            operator: "EQUALS"
            fieldLocationIndex: 6
          - fieldName: "fieldName"
            value: "value"
            operator: "EQUALS"
            fieldLocationIndex: 6
          anyOrAll: "ALL"
          action: "SHOW"
        name: "name"
        fontSize: 1.46581298050294517310021547018550336360931396484375
        locations:
        - pageNumber: 2
          top: 7.061401241503109105224211816675961017608642578125
          left: 5.63737665663332876420099637471139430999755859375
          width: 9.301444243932575517419536481611430644989013671875
          height: 5.962133916683182377482808078639209270477294921875
        - pageNumber: 2
          top: 7.061401241503109105224211816675961017608642578125
          left: 5.63737665663332876420099637471139430999755859375
          width: 9.301444243932575517419536481611430644989013671875
          height: 5.962133916683182377482808078639209270477294921875
        assignee: "assignee"
        alignment: "LEFT"
        fontColor: "fontColor"
        maxLength: 3
      - radioCheckType: "CIRCLE"
        borderColor: "borderColor"
        valueExpression: "valueExpression"
        maskingText: "maskingText"
        defaultValue: "defaultValue"
        masked: true
        minLength: 4
        origin: "AUTHORED"
        tooltip: "tooltip"
        hiddenOptions:
        - "hiddenOptions"
        - "hiddenOptions"
        required: true
        validationData: "validationData"
        minValue: 7.3862819483858839220147274318151175975799560546875
        borderWidth: 0.80082819046101150206595775671303272247314453125
        inputType: "TEXT_FIELD"
        borderStyle: "SOLID"
        calculated: true
        contentType: "DATA"
        validation: "NONE"
        displayLabel: "displayLabel"
        hyperlink:
          linkType: "INTERNAL"
          documentLocation:
            pageNumber: 2
            top: 7.061401241503109105224211816675961017608642578125
            left: 5.63737665663332876420099637471139430999755859375
            width: 9.301444243932575517419536481611430644989013671875
            height: 5.962133916683182377482808078639209270477294921875
          url: "url"
        backgroundColor: "backgroundColor"
        visible: true
        displayFormatType: "DEFAULT"
        maxValue: 2.027123023002321833274663731572218239307403564453125
        validationErrMsg: "validationErrMsg"
        displayFormat: "displayFormat"
        visibleOptions:
        - "visibleOptions"
        - "visibleOptions"
        readOnly: true
        fontName: "fontName"
        conditionalAction:
          predicates:
          - fieldName: "fieldName"
            value: "value"
            operator: "EQUALS"
            fieldLocationIndex: 6
          - fieldName: "fieldName"
            value: "value"
            operator: "EQUALS"
            fieldLocationIndex: 6
          anyOrAll: "ALL"
          action: "SHOW"
        name: "name"
        fontSize: 1.46581298050294517310021547018550336360931396484375
        locations:
        - pageNumber: 2
          top: 7.061401241503109105224211816675961017608642578125
          left: 5.63737665663332876420099637471139430999755859375
          width: 9.301444243932575517419536481611430644989013671875
          height: 5.962133916683182377482808078639209270477294921875
        - pageNumber: 2
          top: 7.061401241503109105224211816675961017608642578125
          left: 5.63737665663332876420099637471139430999755859375
          width: 9.301444243932575517419536481611430644989013671875
          height: 5.962133916683182377482808078639209270477294921875
        assignee: "assignee"
        alignment: "LEFT"
        fontColor: "fontColor"
        maxLength: 3
  AgreementInfo:
    required:
    - "fileInfos"
    - "name"
    - "participantSetsInfo"
    - "signatureType"
    - "state"
    properties:
      ccs:
        type: "array"
        description: "A list of one or more CCs that will be copied in the agreement\
          \ transaction. The CCs will each receive an email at the beginning of the\
          \ transaction and also when the final document is signed. The email addresses\
          \ will also receive a copy of the document, attached as a PDF file. Should\
          \ not be provided in offline agreement creation."
        items:
          $ref: "#/definitions/AgreementCcInfo"
      createdDate:
        type: "string"
        format: "date"
        description: "Date when agreement was created. This is a server generated\
          \ attributed and can not be provided in POST/PUT calls. Format would be\
          \ yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents\
          \ UTC time"
      deviceInfo:
        description: "Device info of the offline device. It should only be provided\
          \ in case of offline agreement creation."
        $ref: "#/definitions/OfflineDeviceInfo"
      documentVisibilityEnabled:
        type: "boolean"
        description: "If set to true, enable limited document visibility. Should not\
          \ be provided in offline agreement creation."
      emailOption:
        description: "Email configurations for the agreement. Should not be provided\
          \ in offline agreement creation."
        $ref: "#/definitions/EmailOption"
      expirationTime:
        type: "string"
        format: "date"
        description: "Time after which Agreement expires and needs to be signed before\
          \ it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z\
          \ represents UTC time. Should not be provided in offline agreement creation."
      externalId:
        description: "An arbitrary value from your system, which can be specified\
          \ at sending time and then later returned or queried. Should not be provided\
          \ in offline agreement creation."
        $ref: "#/definitions/ExternalId"
      fileInfos:
        type: "array"
        description: "A list of one or more files (or references to files) that will\
          \ be sent out for signature. If more than one file is provided, they will\
          \ be combined into one PDF before being sent out. Note: Only one of the\
          \ four parameters in every FileInfo object must be specified"
        items:
          $ref: "#/definitions/FileInfo"
      firstReminderDelay:
        type: "integer"
        description: "Integer which specifies the delay in hours before sending the\
          \ first reminder.<br>This is an optional field. The minimum value allowed\
          \ is 1 hour and the maximum value can’t be more than the difference of agreement\
          \ creation and expiry time of the agreement in hours.<br>If this is not\
          \ specified but the reminder frequency is specified, then the first reminder\
          \ will be sent based on frequency.<br>i.e. if the reminder is created with\
          \ frequency specified as daily, the firstReminderDelay will be 24 hours.\
          \ Should not be provided in offline agreement creation."
      id:
        type: "string"
        description: "The unique identifier of the agreement.If provided in POST,\
          \ it will simply be ignored"
      locale:
        type: "string"
        description: "The locale associated with this agreement - specifies the language\
          \ for the signing page and emails, for example en_US or fr_FR. If none specified,\
          \ defaults to the language configured for the agreement sender"
      message:
        type: "string"
        description: "An optional message to the participants, describing what is\
          \ being sent or why their signature is required"
      name:
        type: "string"
        description: "The name of the agreement that will be used to identify it,\
          \ in emails, website and other places"
      participantSetsInfo:
        type: "array"
        description: "A list of one or more participant set. A participant set may\
          \ have one or more participant. If any member of the participant set takes\
          \ the action that has been assigned to the set(Sign/Approve/Acknowledge\
          \ etc ), the action is considered as the action taken by whole participation\
          \ set. For regular (non-MegaSign) documents, there is no limit on the number\
          \ of electronic signatures in a single document. Written signatures are\
          \ limited to four per document"
        items:
          $ref: "#/definitions/ParticipantSetInfo"
      postSignOption:
        description: "URL and associated properties for the success page the user\
          \ will be taken to after completing the signing process. Should not be provided\
          \ in offline agreement creation."
        $ref: "#/definitions/PostSignOption"
      reminderFrequency:
        type: "string"
        description: "Optional parameter that sets how often you want to send reminders\
          \ to the participants. If it is not specified, the default frequency set\
          \ for the account will be used. Should not be provided in offline agreement\
          \ creation."
        enum:
        - "DAILY_UNTIL_SIGNED"
        - "WEEKLY_UNTIL_SIGNED"
      securityOption:
        description: "Optional secondary security parameters for the agreement. Should\
          \ not be provided in offline agreement creation."
        $ref: "#/definitions/SecurityOption"
      senderEmail:
        type: "string"
        description: "Email of agreement sender. Only provided in GET. Can not be\
          \ provided in POST/PUT request. If provided in POST/PUT, it will be ignored"
      signatureType:
        type: "string"
        description: "Specifies the type of signature you would like to request -\
          \ written or e-signature. The possible values are <br> ESIGN : Agreement\
          \ needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed\
          \ using handwritten signature and signed document will be uploaded into\
          \ the system"
        enum:
        - "ESIGN"
        - "WRITTEN"
      state:
        type: "string"
        description: "The state in which the agreement should land. The state field\
          \ can only be provided in POST calls, will never get returned in GET /agreements/{ID}\
          \ and will be ignored if provided in PUT /agreements/{ID} call. The eventual\
          \ status of the agreement can be obtained from GET /agreements/ID"
        enum:
        - "AUTHORING"
        - "DRAFT"
        - "IN_PROCESS"
      status:
        type: "string"
        description: "This is a server generated attribute which provides the detailed\
          \ status of an agreement."
        enum:
        - "OUT_FOR_SIGNATURE"
        - "OUT_FOR_DELIVERY"
        - "OUT_FOR_ACCEPTANCE"
        - "OUT_FOR_FORM_FILLING"
        - "OUT_FOR_APPROVAL"
        - "AUTHORING"
        - "CANCELLED"
        - "SIGNED"
        - "APPROVED"
        - "DELIVERED"
        - "ACCEPTED"
        - "FORM_FILLED"
        - "EXPIRED"
        - "ARCHIVED"
        - "PREFILL"
        - "WIDGET_WAITING_FOR_VERIFICATION"
        - "DRAFT"
        - "DOCUMENTS_NOT_YET_PROCESSED"
        - "WAITING_FOR_FAXIN"
        - "WAITING_FOR_VERIFICATION"
      vaultingInfo:
        description: "Vaulting properties that allows Adobe Sign to securely store\
          \ documents with a vault provider"
        $ref: "#/definitions/VaultingInfo"
      workflowId:
        type: "string"
        description: "The identifier of custom workflow which defines the routing\
          \ path of an agreement. Should not be provided in offline agreement creation."
    example:
      firstReminderDelay: 6
      emailOption:
        sendOptions:
          initEmails: "ALL"
          inFlightEmails: "ALL"
          completionEmails: "ALL"
      signatureType: "ESIGN"
      externalId:
        id: "id"
      locale: "locale"
      message: "message"
      vaultingInfo:
        enabled: true
      deviceInfo:
        deviceDescription: "deviceDescription"
        applicationDescription: "applicationDescription"
        deviceTime: "2000-01-23"
      securityOption:
        openPassword: "openPassword"
      postSignOption:
        redirectUrl: "redirectUrl"
        redirectDelay: 5
      reminderFrequency: "DAILY_UNTIL_SIGNED"
      ccs:
      - visiblePages:
        - "visiblePages"
        - "visiblePages"
        label: "label"
        email: "email"
      - visiblePages:
        - "visiblePages"
        - "visiblePages"
        label: "label"
        email: "email"
      createdDate: "2000-01-23"
      documentVisibilityEnabled: true
      participantSetsInfo:
      - role: "SIGNER"
        visiblePages:
        - "visiblePages"
        - "visiblePages"
        name: "name"
        label: "label"
        privateMessage: "privateMessage"
        memberInfos:
        - email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
        - email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
        order: 1
      - role: "SIGNER"
        visiblePages:
        - "visiblePages"
        - "visiblePages"
        name: "name"
        label: "label"
        privateMessage: "privateMessage"
        memberInfos:
        - email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
        - email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
        order: 1
      expirationTime: "2000-01-23"
      senderEmail: "senderEmail"
      name: "name"
      fileInfos:
      - transientDocumentId: "transientDocumentId"
        document:
          numPages: 0
          name: "name"
          id: "id"
          label: "label"
          mimeType: "mimeType"
        libraryDocumentId: "libraryDocumentId"
        label: "label"
        urlFileInfo:
          name: "name"
          mimeType: "mimeType"
          url: "url"
      - transientDocumentId: "transientDocumentId"
        document:
          numPages: 0
          name: "name"
          id: "id"
          label: "label"
          mimeType: "mimeType"
        libraryDocumentId: "libraryDocumentId"
        label: "label"
        urlFileInfo:
          name: "name"
          mimeType: "mimeType"
          url: "url"
      id: "id"
      state: "AUTHORING"
      workflowId: "workflowId"
      status: "OUT_FOR_SIGNATURE"
  AgreementRejectionInfo:
    required:
    - "comment"
    properties:
      comment:
        type: "string"
        description: "Comment describing the reason to reject this agreement."
  AgreementStateInfo:
    required:
    - "state"
    properties:
      agreementCancellationInfo:
        description: "Cancellation information for the agreement"
        $ref: "#/definitions/AgreementCancellationInfo"
      state:
        type: "string"
        description: "The state in which the agreement should land"
        enum:
        - "AUTHORING"
        - "CANCELLED"
        - "IN_PROCESS"
  AgreementView:
    required:
    - "isCurrent"
    - "name"
    properties:
      embeddedCode:
        type: "string"
        description: "Embedded code of url of resource "
      expiration:
        type: "string"
        format: "date"
        description: "Expiration of user url "
      isCurrent:
        type: "boolean"
        description: "True if this view is the current view"
      name:
        type: "string"
        description: "Name of the requested agreement view"
        enum:
        - "COMPOSE"
        - "PREFILL"
        - "AUTHORING"
        - "SEND_PROGRESS"
        - "POST_CREATE"
        - "DOCUMENT"
        - "MANAGE"
        - "SIGNING"
        - "ALL"
      url:
        type: "string"
        description: "Url of resource location"
    example:
      isCurrent: true
      embeddedCode: "embeddedCode"
      name: "COMPOSE"
      expiration: "2000-01-23"
      url: "url"
  AgreementViewInfo:
    required:
    - "name"
    properties:
      commonViewConfiguration:
        description: "Common view configuration for all the available views"
        $ref: "#/definitions/CommonViewConfiguration"
      composeViewConfiguration:
        description: "Compose page view configuration"
        $ref: "#/definitions/ComposeViewConfiguration"
      name:
        type: "string"
        description: "Name of the requested agreement view"
        enum:
        - "COMPOSE"
        - "PREFILL"
        - "AUTHORING"
        - "SEND_PROGRESS"
        - "POST_CREATE"
        - "DOCUMENT"
        - "MANAGE"
        - "SIGNING"
        - "ALL"
  AgreementViews:
    required:
    - "agreementViewList"
    properties:
      agreementViewList:
        type: "array"
        description: "List of agreement views"
        items:
          $ref: "#/definitions/AgreementView"
    example:
      agreementViewList:
      - isCurrent: true
        embeddedCode: "embeddedCode"
        name: "COMPOSE"
        expiration: "2000-01-23"
        url: "url"
      - isCurrent: true
        embeddedCode: "embeddedCode"
        name: "COMPOSE"
        expiration: "2000-01-23"
        url: "url"
  CCParticipantInfo:
    required:
    - "company"
    - "email"
    - "name"
    - "participantId"
    properties:
      company:
        type: "string"
        description: "Company of the CC participant, if available."
      email:
        type: "string"
        description: "Email of the CC participant of the agreement"
      name:
        type: "string"
        description: "Name of the CC participant, if available."
      participantId:
        type: "string"
        description: " The unique identifier of the CC participant of the agreement."
    example:
      participantId: "participantId"
      name: "name"
      company: "company"
      email: "email"
  CombinedDocumentPagesInfo:
    required:
    - "documentPagesInfo"
    properties:
      documentPagesInfo:
        type: "array"
        description: "List of basic information of all pages of the combined document\
          \ of an Agreement."
        items:
          $ref: "#/definitions/DocumentPageInfo"
    example:
      documentPagesInfo:
      - rotation: 1.46581298050294517310021547018550336360931396484375
        width: 5.962133916683182377482808078639209270477294921875
        index: 6
        height: 0.80082819046101150206595775671303272247314453125
      - rotation: 1.46581298050294517310021547018550336360931396484375
        width: 5.962133916683182377482808078639209270477294921875
        index: 6
        height: 0.80082819046101150206595775671303272247314453125
  CommonViewConfiguration:
    properties:
      autoLoginUser:
        type: "boolean"
        description: "Auto LogIn Flag. If true, the URL returned will automatically\
          \ log the user in. If false, the URL returned will require the credentials.\
          \ By default its value is false"
      locale:
        type: "string"
        description: "Message template locale"
      noChrome:
        type: "boolean"
        description: "No Chrome Flag. If true, the embedded page is shown without\
          \ a navigation header or footer. If false, the standard page header and\
          \ footer will be present. By default its value is false"
  ComposeViewConfiguration:
    properties:
      fileUploadOptions:
        description: "Controls various file upload options available on the send page"
        $ref: "#/definitions/FileUploadOptions"
      isPreviewSelected:
        type: "boolean"
        description: "Should the COMPOSE page be provided with authoring mode selected?"
  DelegatedParticipantInfo:
    required:
    - "email"
    - "securityOption"
    properties:
      email:
        type: "string"
        description: "Email of the participant. In case of modifying a participant\
          \ set (PUT) this is a required field. In case of GET, this is the required\
          \ field and will always be returned unless it is a fax workflow (legacy\
          \ agreements) that were created using fax as input"
      securityOption:
        description: "Security options that apply to the participant. This cannot\
          \ be changed as part of the PUT call"
        $ref: "#/definitions/DelegatedParticipantSecurityOption"
  DelegatedParticipantSecurityOption:
    properties:
      phoneInfo:
        description: "The phoneInfo required for the participant to view and sign\
          \ the document"
        $ref: "#/definitions/PhoneInfo"
  DelegatedParticipantSetInfo:
    required:
    - "memberInfos"
    properties:
      memberInfos:
        type: "array"
        description: "Array of ParticipantInfo objects, containing participant-specific\
          \ data (e.g. email). All participants in the array belong to the same set"
        items:
          $ref: "#/definitions/DelegatedParticipantInfo"
      privateMessage:
        type: "string"
        description: "Participant set's private message - all participants in the\
          \ set will receive the same message. This cannot be changed as part of the\
          \ PUT call."
  DelegationResponse:
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "The unique identifier of the participant set to which the agreement\
          \ was forwarded."
    description: "A JSON that contains the id of newly created delegated participant\
      \ set"
    example:
      id: "id"
  DetailedParticipantInfo:
    required:
    - "email"
    - "securityOption"
    properties:
      company:
        type: "string"
        description: "The company of the participant, if available. This cannot be\
          \ changed as part of the PUT call."
      email:
        type: "string"
        description: "Email of the participant. In case of modifying a participant\
          \ set (PUT) this is a required field. In case of GET, this is the required\
          \ field and will always be returned unless it is a fax workflow (legacy\
          \ agreements) that were created using fax as input"
      fax:
        type: "string"
        description: "Fax of the participant. New Agreements can not be created with\
          \ fax option. This is only returned for legacy agreements created with fax\
          \ as participants"
      id:
        type: "string"
        description: "The unique identifier of the participant. This will be returned\
          \ as part of Get call but is not mandatory to be passed as part of PUT call\
          \ for agreements/{id}/members/participantSets/{id}."
      name:
        type: "string"
        description: "The name of the participant, if available. This cannot be changed\
          \ as part of the PUT call."
      privateMessage:
        type: "string"
        description: "The private message of the participant, if available. This cannot\
          \ be changed as part of the PUT call."
      securityOption:
        description: "Security options that apply to the participant. This cannot\
          \ be changed as part of the PUT call"
        $ref: "#/definitions/ParticipantSecurityOption"
      self:
        type: "boolean"
        description: "True if this participant is the same user that is calling the\
          \ API. Returned as part of Get. Ignored (not required) if modifying a participant\
          \ set (PUT)."
      status:
        type: "string"
        description: "The status of the participant. This cannot be changed as part\
          \ of the PUT call."
        enum:
        - "REPLACED"
        - "ACTIVE"
    example:
      name: "name"
      self: true
      company: "company"
      id: "id"
      fax: "fax"
      privateMessage: "privateMessage"
      email: "email"
      securityOption:
        password: "password"
        authenticationMethod: "NONE"
        phoneInfo:
          phone: "phone"
          countryCode: "countryCode"
      status: "REPLACED"
  DetailedParticipantSetInfo:
    required:
    - "memberInfos"
    - "order"
    - "role"
    properties:
      id:
        type: "string"
        description: "The unique identifier of the participant set. This cannot be\
          \ changed as part of the PUT call."
      memberInfos:
        type: "array"
        description: "Array of ParticipantInfo objects, containing participant-specific\
          \ data (e.g. email). All participants in the array belong to the same set"
        items:
          $ref: "#/definitions/DetailedParticipantInfo"
      name:
        type: "string"
        description: "Name of ParticipantSet (it can be empty, but needs not to be\
          \ unique in a single agreement). Maximum no of characters in participant\
          \ set name is restricted to 255. This cannot be changed as part of the PUT\
          \ call."
      order:
        type: "integer"
        description: "Index indicating sequential signing group (specified for hybrid\
          \ routing). This cannot be changed as part of the PUT call."
      privateMessage:
        type: "string"
        description: "Participant set's private message - all participants in the\
          \ set will receive the same message. This cannot be changed as part of the\
          \ PUT call."
      role:
        type: "string"
        description: "Role assumed by all participants in the set (signer, approver\
          \ etc.). This cannot be changed as part of the PUT call."
        enum:
        - "SIGNER"
        - "SENDER"
        - "APPROVER"
        - "ACCEPTOR"
        - "CERTIFIED_RECIPIENT"
        - "FORM_FILLER"
        - "DELEGATE_TO_SIGNER"
        - "DELEGATE_TO_APPROVER"
        - "DELEGATE_TO_ACCEPTOR"
        - "DELEGATE_TO_CERTIFIED_RECIPIENT"
        - "DELEGATE_TO_FORM_FILLER"
        - "SHARE"
      status:
        type: "string"
        description: "The agreement status with respect to the participant set. This\
          \ cannot be changed as part of the PUT call."
        enum:
        - "CANCELLED"
        - "COMPLETED"
        - "EXPIRED"
        - "NOT_YET_VISIBLE"
        - "WAITING_FOR_OTHERS"
        - "WAITING_FOR_MY_APPROVAL"
        - "WAITING_FOR_AUTHORING"
        - "WAITING_FOR_MY_ACKNOWLEDGEMENT"
        - "WAITING_FOR_MY_ACCEPTANCE"
        - "WAITING_FOR_MY_FORM_FILLING"
        - "WAITING_FOR_MY_DELEGATION"
        - "WAITING_FOR_MY_SIGNATURE"
        - "WAITING_FOR_MY_VERIFICATION"
        - "WAITING_FOR_PREFILL"
    example:
      role: "SIGNER"
      name: "name"
      id: "id"
      privateMessage: "privateMessage"
      memberInfos:
      - name: "name"
        self: true
        company: "company"
        id: "id"
        fax: "fax"
        privateMessage: "privateMessage"
        email: "email"
        securityOption:
          password: "password"
          authenticationMethod: "NONE"
          phoneInfo:
            phone: "phone"
            countryCode: "countryCode"
        status: "REPLACED"
      - name: "name"
        self: true
        company: "company"
        id: "id"
        fax: "fax"
        privateMessage: "privateMessage"
        email: "email"
        securityOption:
          password: "password"
          authenticationMethod: "NONE"
          phoneInfo:
            phone: "phone"
            countryCode: "countryCode"
        status: "REPLACED"
      order: 0
      status: "CANCELLED"
  DeviceLocation:
    required:
    - "latitude"
    - "longitude"
    properties:
      latitude:
        type: "number"
        format: "float"
        description: "Latitude coordinate"
      longitude:
        type: "number"
        format: "float"
        description: "Longitude coordinate"
    example:
      latitude: 0.8008282
      longitude: 6.0274563
  DigitalSignatureInfo:
    required:
    - "company"
    - "email"
    - "name"
    properties:
      company:
        type: "string"
        description: "Company name captured during digital signing"
      email:
        type: "string"
        description: "Email captured during digital signing"
      name:
        type: "string"
        description: "Name captured during digital signing"
    example:
      name: "name"
      company: "company"
      email: "email"
  DisplayParticipantInfo:
    required:
    - "email"
    properties:
      company:
        type: "string"
        description: "Displays the name of the company of the user, if available"
      email:
        type: "string"
        description: "Displays the email of the user"
      fullName:
        type: "string"
        description: "Displays the full name of the user, if available. "
    example:
      fullName: "fullName"
      company: "company"
      email: "email"
  DisplayParticipantSetInfo:
    required:
    - "displayUserSetMemberInfos"
    properties:
      displayUserSetMemberInfos:
        type: "array"
        description: "Displays the info about user set"
        items:
          $ref: "#/definitions/DisplayParticipantInfo"
      displayUserSetName:
        type: "string"
        description: "The name of the display user set. Returned only, if the API\
          \ caller is the sender of agreement. "
    example:
      displayUserSetMemberInfos:
      - fullName: "fullName"
        company: "company"
        email: "email"
      - fullName: "fullName"
        company: "company"
        email: "email"
      displayUserSetName: "displayUserSetName"
  Document:
    required:
    - "id"
    - "label"
    - "numPages"
    properties:
      id:
        type: "string"
        description: "ID of the document. In case of PUT call, this is the only field\
          \ that is accepted in Document structure. Name and mimeType are ignored\
          \ in case of PUT call"
      label:
        type: "string"
        description: "Label of the document"
      mimeType:
        type: "string"
        description: "mimeType of the original file. This is returned in GET but not\
          \ accepted back in PUT"
      name:
        type: "string"
        description: "Name of the original document uploaded. This is returned in\
          \ GET but not accepted back in PUT"
      numPages:
        type: "integer"
        description: "Number of pages in the document"
    example:
      numPages: 0
      name: "name"
      id: "id"
      label: "label"
      mimeType: "mimeType"
  DocumentImageUrls:
    required:
    - "imageURLs"
    properties:
      imageSize:
        type: "string"
        description: "ImageSize corresponding to the imageUrl returned "
        enum:
        - "FIXED_WIDTH_50px"
        - "FIXED_WIDTH_250px"
        - "FIXED_WIDTH_675px"
        - "ZOOM_50_PERCENT"
        - "ZOOM_75_PERCENT"
        - "ZOOM_100_PERCENT"
        - "ZOOM_125_PERCENT"
        - "ZOOM_150_PERCENT"
        - "ZOOM_200_PERCENT"
      imageURLs:
        type: "array"
        description: "A list of image url (one per page)."
        items:
          $ref: "#/definitions/PageImageUrl"
      imagesAvailable:
        type: "boolean"
        description: "true if images for the associated image size is available, else\
          \ false."
    example:
      imageURLs:
      - pageNumber: 0
        url: "url"
      - pageNumber: 0
        url: "url"
      imagesAvailable: true
      imageSize: "FIXED_WIDTH_50px"
  DocumentImageUrlsInfo:
    required:
    - "documentId"
    - "documentImageUrlsList"
    properties:
      documentId:
        type: "string"
        description: "Id of the document"
      documentImageUrlsList:
        type: "array"
        description: "A list of documents image URLs."
        items:
          $ref: "#/definitions/DocumentImageUrls"
    example:
      documentImageUrlsList:
      - imageURLs:
        - pageNumber: 0
          url: "url"
        - pageNumber: 0
          url: "url"
        imagesAvailable: true
        imageSize: "FIXED_WIDTH_50px"
      - imageURLs:
        - pageNumber: 0
          url: "url"
        - pageNumber: 0
          url: "url"
        imagesAvailable: true
        imageSize: "FIXED_WIDTH_50px"
      documentId: "documentId"
  DocumentPageInfo:
    required:
    - "height"
    - "index"
    - "rotation"
    - "width"
    properties:
      height:
        type: "number"
        format: "double"
        description: "Height of the page"
      index:
        type: "integer"
        format: "int32"
        description: "Index of the page in combined document starting from 1"
      rotation:
        type: "number"
        format: "double"
        description: "Rotation angle of the page in clockwise direction in degree"
      width:
        type: "number"
        format: "double"
        description: "Width of the page"
    example:
      rotation: 1.46581298050294517310021547018550336360931396484375
      width: 5.962133916683182377482808078639209270477294921875
      index: 6
      height: 0.80082819046101150206595775671303272247314453125
  DocumentsImageUrlsInfo:
    required:
    - "originalDocumentsImageUrlsInfo"
    properties:
      originalDocumentsImageUrlsInfo:
        type: "array"
        description: "A list of original document image URLs info."
        items:
          $ref: "#/definitions/DocumentImageUrlsInfo"
      supportingDocumentsImageUrlsInfo:
        type: "array"
        description: "A list of supporting document image URLs info."
        items:
          $ref: "#/definitions/DocumentImageUrlsInfo"
    example:
      supportingDocumentsImageUrlsInfo:
      - documentImageUrlsList:
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        documentId: "documentId"
      - documentImageUrlsList:
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        documentId: "documentId"
      originalDocumentsImageUrlsInfo:
      - documentImageUrlsList:
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        documentId: "documentId"
      - documentImageUrlsList:
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        - imageURLs:
          - pageNumber: 0
            url: "url"
          - pageNumber: 0
            url: "url"
          imagesAvailable: true
          imageSize: "FIXED_WIDTH_50px"
        documentId: "documentId"
  EmailOption:
    properties:
      sendOptions:
        description: "Specify emails to be sent to different participants at different\
          \ steps of the agreement process. Note: ALL means  emails for the events\
          \ will be sent to all participants. NONE means emails for the events will\
          \ not be sent to any participant"
        $ref: "#/definitions/SendOptions"
    example:
      sendOptions:
        initEmails: "ALL"
        inFlightEmails: "ALL"
        completionEmails: "ALL"
  ExternalId:
    properties:
      id:
        type: "string"
        description: "An arbitrary value from your system, which can be specified\
          \ at sending time and then later returned or queried"
    example:
      id: "id"
  FileInfo:
    properties:
      document:
        description: "A document that is associated with the agreement. This field\
          \ cannot be provided in POST call. In case of GET call, this is the only\
          \ field returned in the response"
        $ref: "#/definitions/Document"
      label:
        type: "string"
        description: "The unique label value of a file info element. In case of custom\
          \ workflow this will map a file to corresponding file element in workflow\
          \ definition. This must be specified in case of custom workflow agreement\
          \ creation request "
      libraryDocumentId:
        type: "string"
        description: "ID for an existing Library document that will be added to the\
          \ agreement"
      transientDocumentId:
        type: "string"
        description: "ID for a transient document that will be added to the agreement"
      urlFileInfo:
        description: "URL for an external document to add to the agreement"
        $ref: "#/definitions/URLFileInfo"
    example:
      transientDocumentId: "transientDocumentId"
      document:
        numPages: 0
        name: "name"
        id: "id"
        label: "label"
        mimeType: "mimeType"
      libraryDocumentId: "libraryDocumentId"
      label: "label"
      urlFileInfo:
        name: "name"
        mimeType: "mimeType"
        url: "url"
  FileUploadOptions:
    properties:
      libraryDocument:
        type: "boolean"
        description: "Whether library documents link should appear or not. Default\
          \ value is taken as true"
      localFile:
        type: "boolean"
        description: "Whether local file upload button should appear or not. Default\
          \ value is taken as true"
      webConnectors:
        type: "boolean"
        description: "Whether link to attach documents from web sources like Dropbox\
          \ should appear or not. Default value is taken as true"
  FormField:
    required:
    - "locations"
    - "name"
    properties:
      alignment:
        type: "string"
        description: "Alignment of the text."
        enum:
        - "LEFT"
        - "RIGHT"
        - "CENTER"
      assignee:
        type: "string"
        description: "Who the field is assigned to.  Either a participant set id,\
          \ null, NOBODY or PREFILL."
      backgroundColor:
        type: "string"
        description: "Background color of the form field in RGB or HEX format"
      borderColor:
        type: "string"
        description: "Color of the border of the field in RGB or HEX format"
      borderStyle:
        type: "string"
        description: "Style of the border of the field."
        enum:
        - "SOLID"
        - "DASHED"
        - "BEVELED"
        - "INSET"
        - "UNDERLINE"
      borderWidth:
        type: "number"
        format: "double"
        description: "Width of the border of the field in pixels"
      calculated:
        type: "boolean"
        description: "true if this field's value is calculated from an expression,\
          \ else false"
      conditionalAction:
        description: "A predicate (or set of predicates) that determines whether this\
          \ field is visible and enabled."
        $ref: "#/definitions/FormFieldConditionalAction"
      contentType:
        type: "string"
        description: "Content Type of the form field."
        enum:
        - "DATA"
        - "SIGNATURE_BLOCK"
        - "SIGNATURE"
        - "SIGNER_NAME"
        - "SIGNER_FIRST_NAME"
        - "SIGNER_LAST_NAME"
        - "SIGNER_INITIALS"
        - "SIGNER_EMAIL"
        - "SIGNER_TITLE"
        - "SIGNER_COMPANY"
        - "SIGNATURE_DATE"
        - "AGREEMENT_NAME"
        - "AGREEMENT_MESSAGE"
        - "TRANSACTION_ID"
        - "SIGNATURE_STAMP"
        - "PAYMENT"
        - "DIGITAL_SIGNATURE"
      defaultValue:
        type: "string"
        description: "Default value of the form field"
      displayFormat:
        type: "string"
        description: "Format of the value of the field to be displayed based on the\
          \ displayFormatType property."
      displayFormatType:
        type: "string"
        description: "Format type of the text field."
        enum:
        - "DEFAULT"
        - "DATE"
        - "NUMBER"
      displayLabel:
        type: "string"
        description: "Display label attached to the field"
      fontColor:
        type: "string"
        description: "Font color of the form field in RGB or HEX format"
      fontName:
        type: "string"
        description: "Font name of the form field"
      fontSize:
        type: "number"
        format: "double"
        description: "Font size of the form field in points"
      hiddenOptions:
        type: "array"
        description: "Text values which are hidden in a drop down form field"
        items:
          type: "string"
      hyperlink:
        description: "Hyperlink-specific data (e.g. as url, link type)"
        $ref: "#/definitions/FormFieldHyperlink"
      inputType:
        type: "string"
        description: "Input type of the form field"
        enum:
        - "TEXT_FIELD"
        - "MULTILINE"
        - "PASSWORD"
        - "RADIO"
        - "CHECKBOX"
        - "DROP_DOWN"
        - "LISTBOX"
        - "SIGNATURE"
        - "PDF_SIGNATURE"
        - "BUTTON"
        - "BLOCK"
        - "FILE_CHOOSER"
        - "COMB"
        - "INLINE_IMAGE"
        - "UNSUPPORTED"
      locations:
        type: "array"
        description: "All locations in a document where the form field is placed"
        items:
          $ref: "#/definitions/FormFieldLocation"
      masked:
        type: "boolean"
        description: "true if the input entered by the signer has to be masked (like\
          \ password), false if it shouldn't be"
      maskingText:
        type: "string"
        description: "Text to mask the masked form field"
      maxLength:
        type: "integer"
        format: "int32"
        description: "Maximum length of the input text field in terms of no. of characters"
      maxValue:
        type: "number"
        format: "double"
        description: "Upper bound of the number that can be entered by the signer"
      minLength:
        type: "integer"
        format: "int32"
        description: "Minimum length of the input text field in terms of no. of characters"
      minValue:
        type: "number"
        format: "double"
        description: "Lower bound of the number that can be entered by the signer"
      name:
        type: "string"
        description: "The name of the form field"
      origin:
        type: "string"
        description: "Origin of Form Field"
        enum:
        - "AUTHORED"
        - "GENERATED"
        - "IMPORTED"
      radioCheckType:
        type: "string"
        description: "The type of radio button (if field is radio button, identified\
          \ by inputType)."
        enum:
        - "CIRCLE"
        - "CHECK"
        - "CROSS"
        - "DIAMOND"
        - "SQUARE"
        - "STAR"
      readOnly:
        type: "boolean"
        description: "true if it is a read-only field, else false"
      required:
        type: "boolean"
        description: "true if it is a mandatory field to be filled by the signer,\
          \ else false"
      tooltip:
        type: "string"
        description: "Text that appears while hovering over the field"
      validation:
        type: "string"
        description: "Rule for validating the field value."
        enum:
        - "NONE"
        - "STRING"
        - "NUMBER"
        - "DATE"
        - "DATE_CUSTOM"
        - "TIME"
        - "ZIP"
        - "PHONE"
        - "SOCIAL_SEC"
        - "EMAIL"
        - "CURRENCY"
        - "PERCENT"
        - "FORMULA"
        - "CUSTOM"
        - "XFA_PICTURE"
      validationData:
        type: "string"
        description: "Further data for validating input with regards to the field's\
          \ specified format. The contents and interpretation of formatData depends\
          \ on the value of validation."
      validationErrMsg:
        type: "string"
        description: "Error message to be shown to the signer if filled value doesn't\
          \ match the validations of the form field"
      valueExpression:
        type: "string"
        description: "Expression to calculate value of the form field"
      visible:
        type: "boolean"
        description: "If set to false, then the form field is hidden.  Otherwise,\
          \ it is visible."
      visibleOptions:
        type: "array"
        description: "Text values which are visible in a drop down form field"
        items:
          type: "string"
    description: "A form field for an agreement."
    example:
      radioCheckType: "CIRCLE"
      borderColor: "borderColor"
      valueExpression: "valueExpression"
      maskingText: "maskingText"
      defaultValue: "defaultValue"
      masked: true
      minLength: 4
      origin: "AUTHORED"
      tooltip: "tooltip"
      hiddenOptions:
      - "hiddenOptions"
      - "hiddenOptions"
      required: true
      validationData: "validationData"
      minValue: 7.3862819483858839220147274318151175975799560546875
      borderWidth: 0.80082819046101150206595775671303272247314453125
      inputType: "TEXT_FIELD"
      borderStyle: "SOLID"
      calculated: true
      contentType: "DATA"
      validation: "NONE"
      displayLabel: "displayLabel"
      hyperlink:
        linkType: "INTERNAL"
        documentLocation:
          pageNumber: 2
          top: 7.061401241503109105224211816675961017608642578125
          left: 5.63737665663332876420099637471139430999755859375
          width: 9.301444243932575517419536481611430644989013671875
          height: 5.962133916683182377482808078639209270477294921875
        url: "url"
      backgroundColor: "backgroundColor"
      visible: true
      displayFormatType: "DEFAULT"
      maxValue: 2.027123023002321833274663731572218239307403564453125
      validationErrMsg: "validationErrMsg"
      displayFormat: "displayFormat"
      visibleOptions:
      - "visibleOptions"
      - "visibleOptions"
      readOnly: true
      fontName: "fontName"
      conditionalAction:
        predicates:
        - fieldName: "fieldName"
          value: "value"
          operator: "EQUALS"
          fieldLocationIndex: 6
        - fieldName: "fieldName"
          value: "value"
          operator: "EQUALS"
          fieldLocationIndex: 6
        anyOrAll: "ALL"
        action: "SHOW"
      name: "name"
      fontSize: 1.46581298050294517310021547018550336360931396484375
      locations:
      - pageNumber: 2
        top: 7.061401241503109105224211816675961017608642578125
        left: 5.63737665663332876420099637471139430999755859375
        width: 9.301444243932575517419536481611430644989013671875
        height: 5.962133916683182377482808078639209270477294921875
      - pageNumber: 2
        top: 7.061401241503109105224211816675961017608642578125
        left: 5.63737665663332876420099637471139430999755859375
        width: 9.301444243932575517419536481611430644989013671875
        height: 5.962133916683182377482808078639209270477294921875
      assignee: "assignee"
      alignment: "LEFT"
      fontColor: "fontColor"
      maxLength: 3
  FormFieldConditionPredicate:
    properties:
      fieldLocationIndex:
        type: "integer"
        format: "int32"
        description: "Index of the location of the form field used in the predicate"
      fieldName:
        type: "string"
        description: "Name of the field whose value is the basis of predicate"
      operator:
        type: "string"
        description: "Operator to be applied on the value of the predicate field."
        enum:
        - "EQUALS"
        - "NOT_EQUALS"
        - "LESS_THAN"
        - "LESS_THAN_EQUALS"
        - "GREATER_THAN"
        - "GREATER_THAN_EQUALS"
        - "IN"
        - "NOT_IN"
        - "CONTAINS"
        - "NOT_CONTAINS"
      value:
        type: "string"
        description: "Value to compare against the value of the predicate's form field,\
          \ using the specified operator"
    description: "A predicate used to determine whether the condtion succeeds"
    example:
      fieldName: "fieldName"
      value: "value"
      operator: "EQUALS"
      fieldLocationIndex: 6
  FormFieldConditionalAction:
    properties:
      action:
        type: "string"
        description: "Action to show/hide the form field is to be taken on the basis\
          \ of evaluation of conditions."
        enum:
        - "SHOW"
        - "HIDE"
        - "DISABLE"
        - "ENABLE"
      anyOrAll:
        type: "string"
        description: "It indicates if any one of the conditions or all of them have\
          \ to be true."
        enum:
        - "ALL"
        - "ANY"
      predicates:
        type: "array"
        description: "The predicates to be evaluated in order to determine whether\
          \ this condition is true"
        items:
          $ref: "#/definitions/FormFieldConditionPredicate"
    description: "Conditional actions to perfom on this form field."
    example:
      predicates:
      - fieldName: "fieldName"
        value: "value"
        operator: "EQUALS"
        fieldLocationIndex: 6
      - fieldName: "fieldName"
        value: "value"
        operator: "EQUALS"
        fieldLocationIndex: 6
      anyOrAll: "ALL"
      action: "SHOW"
  FormFieldHyperlink:
    properties:
      documentLocation:
        description: "Location on the document pointed by the link in case of INTERNAL\
          \ type link"
        $ref: "#/definitions/FormFieldLocation"
      linkType:
        type: "string"
        description: "Type of link in an agreement."
        enum:
        - "INTERNAL"
        - "EXTERNAL"
        - "FROM_TEXT"
      url:
        type: "string"
        description: "URL, in case of EXTERNAL type link"
    description: "Hyperlink-specific data for hyperlink form fields"
    example:
      linkType: "INTERNAL"
      documentLocation:
        pageNumber: 2
        top: 7.061401241503109105224211816675961017608642578125
        left: 5.63737665663332876420099637471139430999755859375
        width: 9.301444243932575517419536481611430644989013671875
        height: 5.962133916683182377482808078639209270477294921875
      url: "url"
  FormFieldLocation:
    required:
    - "height"
    - "left"
    - "pageNumber"
    - "top"
    - "width"
    properties:
      height:
        type: "number"
        format: "double"
        description: "Height of the form field in pixels"
      left:
        type: "number"
        format: "double"
        description: "No. of pixels from left of the page for form field placement"
      pageNumber:
        type: "integer"
        description: "Number of the page where form field has to be placed, starting\
          \ from 1."
      top:
        type: "number"
        format: "double"
        description: "No. of pixels from bottom of the page for form field placement"
      width:
        type: "number"
        format: "double"
        description: "Width of the form field in pixels"
    description: "Location information for form fields"
    example:
      pageNumber: 2
      top: 7.061401241503109105224211816675961017608642578125
      left: 5.63737665663332876420099637471139430999755859375
      width: 9.301444243932575517419536481611430644989013671875
      height: 5.962133916683182377482808078639209270477294921875
  FormFieldMergeInfo:
    properties:
      fieldMergeInfos:
        type: "array"
        description: "A mapping of field names to default values"
        items:
          $ref: "#/definitions/MergefieldInfo"
    description: "Data for updating the default values of existing form fields"
    example:
      fieldMergeInfos:
      - fieldName: "fieldName"
        defaultValue: "defaultValue"
      - fieldName: "fieldName"
        defaultValue: "defaultValue"
  FormFieldPostInfo:
    required:
    - "templateId"
    properties:
      templateId:
        type: "string"
        description: "The ID of the template from which to add new fields"
    description: "Information required to add or update agreement form fields"
  FormFieldPutInfo:
    required:
    - "fields"
    properties:
      fields:
        type: "array"
        description: "The list of fields to update or replace. PDF_SIGNATURE inputType\
          \ field is currently not supported."
        items:
          $ref: "#/definitions/FormField"
    description: "Information required to add or replace agreement form fields"
  MembersInfo:
    required:
    - "ccsInfo"
    - "nextParticipantSets"
    - "participantSets"
    - "senderInfo"
    - "sharesInfo"
    properties:
      ccsInfo:
        type: "array"
        description: "Information of CC participants of the agreement."
        items:
          $ref: "#/definitions/CCParticipantInfo"
      nextParticipantSets:
        type: "array"
        description: "Information of next participant sets."
        items:
          $ref: "#/definitions/DetailedParticipantSetInfo"
      participantSets:
        type: "array"
        description: "Information about the participant Sets."
        items:
          $ref: "#/definitions/DetailedParticipantSetInfo"
      senderInfo:
        description: "Information of the sender of the agreement."
        $ref: "#/definitions/SenderInfo"
      sharesInfo:
        type: "array"
        description: "Information of the participants with whom the agreement has\
          \ been shared."
        items:
          $ref: "#/definitions/ShareParticipantInfo"
    example:
      participantSets:
      - role: "SIGNER"
        name: "name"
        id: "id"
        privateMessage: "privateMessage"
        memberInfos:
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        order: 0
        status: "CANCELLED"
      - role: "SIGNER"
        name: "name"
        id: "id"
        privateMessage: "privateMessage"
        memberInfos:
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        order: 0
        status: "CANCELLED"
      ccsInfo:
      - participantId: "participantId"
        name: "name"
        company: "company"
        email: "email"
      - participantId: "participantId"
        name: "name"
        company: "company"
        email: "email"
      nextParticipantSets:
      - role: "SIGNER"
        name: "name"
        id: "id"
        privateMessage: "privateMessage"
        memberInfos:
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        order: 0
        status: "CANCELLED"
      - role: "SIGNER"
        name: "name"
        id: "id"
        privateMessage: "privateMessage"
        memberInfos:
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        - name: "name"
          self: true
          company: "company"
          id: "id"
          fax: "fax"
          privateMessage: "privateMessage"
          email: "email"
          securityOption:
            password: "password"
            authenticationMethod: "NONE"
            phoneInfo:
              phone: "phone"
              countryCode: "countryCode"
          status: "REPLACED"
        order: 0
        status: "CANCELLED"
      senderInfo:
        participantId: "participantId"
        name: "name"
        self: true
        company: "company"
        email: "email"
        status: "CANCELLED"
      sharesInfo:
      - participantId: "participantId"
        name: "name"
        sharerParticipantId: "sharerParticipantId"
        company: "company"
        email: "email"
      - participantId: "participantId"
        name: "name"
        sharerParticipantId: "sharerParticipantId"
        company: "company"
        email: "email"
  MergefieldInfo:
    required:
    - "defaultValue"
    - "fieldName"
    properties:
      defaultValue:
        type: "string"
        description: "The default value of the field"
      fieldName:
        type: "string"
        description: "The name of the field"
    example:
      fieldName: "fieldName"
      defaultValue: "defaultValue"
  Note:
    required:
    - "note"
    properties:
      note:
        type: "string"
        description: "Content of Note field"
    example:
      note: "note"
  OfflineDeviceInfo:
    required:
    - "applicationDescription"
    - "deviceDescription"
    properties:
      applicationDescription:
        type: "string"
        description: "Application Description"
      deviceDescription:
        type: "string"
        description: "Device Description"
      deviceTime:
        type: "string"
        format: "date"
        description: "The device local time. The device time provided should not be\
          \ before 30 days of current date.Format should be yyyy-MM-dd'T'HH:mm:ssZ.\
          \ For example, e.g 2016-02-25T18:46:19Z represents UTC time"
    example:
      deviceDescription: "deviceDescription"
      applicationDescription: "applicationDescription"
      deviceTime: "2000-01-23"
  PageImageUrl:
    required:
    - "pageNumber"
    - "url"
    properties:
      pageNumber:
        type: "integer"
        format: "int32"
        description: "Page number within the document."
      url:
        type: "string"
        description: "An image url."
    example:
      pageNumber: 0
      url: "url"
  PageInfo:
    required:
    - "nextCursor"
    properties:
      nextCursor:
        type: "string"
        description: "Used to navigate to the next page. If not\_returned, there are\
          \ no further pages."
    example:
      nextCursor: "nextCursor"
  ParticipantSecurityOption:
    required:
    - "authenticationMethod"
    properties:
      authenticationMethod:
        type: "string"
        description: "The authentication method for the participants to have access\
          \ to view and sign the document"
        enum:
        - "NONE"
        - "PASSWORD"
        - "PHONE"
        - "KBA"
        - "WEB_IDENTITY"
        - "ADOBE_SIGN"
      password:
        type: "string"
        description: "The password required for the participant to view and sign the\
          \ document. Note that AdobeSign will never show this password to anyone,\
          \ so you will need to separately communicate it to any relevant parties.\
          \ The password will not be returned in GET call. In case of PUT call, password\
          \ associated with Agreement resource will remain unchanged if no password\
          \ is specified but authentication method is provided as PASSWORD"
      phoneInfo:
        description: "The phoneInfo required for the participant to view and sign\
          \ the document"
        $ref: "#/definitions/PhoneInfo"
    example:
      password: "password"
      authenticationMethod: "NONE"
      phoneInfo:
        phone: "phone"
        countryCode: "countryCode"
  ParticipantSetInfo:
    required:
    - "memberInfos"
    - "order"
    - "role"
    properties:
      label:
        type: "string"
        description: "The unique label of a participant set.<br>For custom workflows,\
          \ label specified in the participation set should map it to the participation\
          \ step in the custom workflow."
      memberInfos:
        type: "array"
        description: "Array of ParticipantInfo objects, containing participant-specific\
          \ data (e.g. email). All participants in the array belong to the same set"
        items:
          $ref: "#/definitions/ParticipantSetMemberInfo"
      name:
        type: "string"
        description: "Name of the participant set (it can be empty, but needs not\
          \ to be unique in a single agreement). Maximum no of characters in participant\
          \ set name is restricted to 255"
      order:
        type: "integer"
        description: "Index indicating position at which signing group needs to sign.\
          \ Signing group to sign at first place is assigned a 1 index. Different\
          \ signingOrder specified in input should form a valid consecutive increasing\
          \ sequence of integers. Otherwise signingOrder will be considered invalid.\
          \ No signingOrder should be specified for SHARE role"
      privateMessage:
        type: "string"
        description: "Participant set's private message - all participants in the\
          \ set will receive the same message"
      role:
        type: "string"
        description: "Role assumed by all participants in the set (signer, approver\
          \ etc.)"
        enum:
        - "SIGNER"
        - "APPROVER"
        - "ACCEPTOR"
        - "CERTIFIED_RECIPIENT"
        - "FORM_FILLER"
        - "DELEGATE_TO_SIGNER"
        - "DELEGATE_TO_APPROVER"
        - "DELEGATE_TO_ACCEPTOR"
        - "DELEGATE_TO_CERTIFIED_RECIPIENT"
        - "DELEGATE_TO_FORM_FILLER"
        - "SHARE"
      visiblePages:
        type: "array"
        description: "When you enable limited document visibility (documentVisibilityEnabled),\
          \ you can specify which file (fileInfo) should be made visible to which\
          \ specific participant set.<br>Specify one or more label values of a fileInfos\
          \ element.<br>Each signer participant sets must contain at least one required\
          \ signature field in at least one visible file included in this API call;\
          \ if not a page with a signature field is automatically appended for any\
          \ missing participant sets. If there is a possibility that one or more participant\
          \ sets do not have a required signature field in the files included in the\
          \ API call, all signer participant sets should include a special index value\
          \ of '0' to make this automatically appended signature page visible to the\
          \ signer. Not doing so may result in an error. For all other roles, you\
          \ may omit this value to exclude this page."
        items:
          type: "string"
    example:
      role: "SIGNER"
      visiblePages:
      - "visiblePages"
      - "visiblePages"
      name: "name"
      label: "label"
      privateMessage: "privateMessage"
      memberInfos:
      - email: "email"
        securityOption:
          password: "password"
          authenticationMethod: "NONE"
          phoneInfo:
            phone: "phone"
            countryCode: "countryCode"
      - email: "email"
        securityOption:
          password: "password"
          authenticationMethod: "NONE"
          phoneInfo:
            phone: "phone"
            countryCode: "countryCode"
      order: 1
  ParticipantSetMemberInfo:
    required:
    - "email"
    properties:
      email:
        type: "string"
        description: "Email of the particpant. In case of creating new Agreements(POST/PUT),\
          \ this is a required field. In case of GET, this is the required field and\
          \ will always be returned unless it is a fax workflow( legacy agreements)\
          \ that were created using fax as input"
      securityOption:
        description: "Security options that apply to the participant"
        $ref: "#/definitions/ParticipantSecurityOption"
    example:
      email: "email"
      securityOption:
        password: "password"
        authenticationMethod: "NONE"
        phoneInfo:
          phone: "phone"
          countryCode: "countryCode"
  PhoneInfo:
    properties:
      countryCode:
        type: "string"
        description: "The phone Info country code required for the participant to\
          \ view and sign the document if authentication method is PHONE"
      phone:
        type: "string"
        description: "The phone number required for the participant to view and sign\
          \ the document if authentication method is PHONE"
    example:
      phone: "phone"
      countryCode: "countryCode"
  PostSignOption:
    properties:
      redirectDelay:
        type: "integer"
        description: "The delay (in seconds) before the user is taken to the success\
          \ page. If this value is greater than 0, the user will first see the standard\
          \ Adobe Sign success message, and then after a delay will be redirected\
          \ to your success page"
      redirectUrl:
        type: "string"
        description: "A publicly accessible url to which the user will be sent after\
          \ successfully completing the signing process"
    example:
      redirectUrl: "redirectUrl"
      redirectDelay: 5
  ReminderCreationResult:
    properties:
      id:
        type: "string"
        description: "An identifier of the reminder resource created on the server.\
          \ Only provided in GET. Cannot be provided in POST request. If provided\
          \ in POST, it will be ignored"
    example:
      id: "id"
  ReminderInfo:
    required:
    - "recipientParticipantIds"
    - "status"
    properties:
      firstReminderDelay:
        type: "integer"
        description: "Integer which specifies the delay in hours before sending the\
          \ first reminder.<br>This is an optional field. The minimum value allowed\
          \ is 1 hour and the maximum value can’t be more than the difference of agreement\
          \ creation and expiry time of the agreement in hours.<br>If this is not\
          \ specified but the reminder frequency is specified, then the first reminder\
          \ will be sent based on frequency.<br>i.e. if the reminder is created with\
          \ frequency specified as daily, the firstReminderDelay will be 24 hours"
      frequency:
        type: "string"
        description: "The frequency at which reminder will be sent until the agreement\
          \ is signed.<br>If frequency is not provided, the reminder will be sent\
          \ once (if the agreement is available at the specified time) with the delay\
          \ based on the firstReminderDelay field and will never repeat again. If\
          \ the agreement is not available at that time, reminder will not be sent"
        enum:
        - "DAILY_UNTIL_SIGNED"
        - "WEEKLY_UNTIL_SIGNED"
        - "ONCE"
      lastSentDate:
        type: "string"
        format: "date"
        description: "The date when the reminder was last sent. Only provided in GET.\
          \ Cannot be provided in POST request. If provided in POST, it will be ignored.\
          \ Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z\
          \ represents UTC time"
      nextSentDate:
        type: "string"
        format: "date"
        description: "The date when the reminder is scheduled to be sent next. Only\
          \ provided in GET. Cannot be provided in POST request. If provided in POST,\
          \ it will be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example,\
          \ e.g 2016-02-25T18:46:19Z represents UTC time"
      note:
        type: "string"
        description: "An optional message sent to the recipients, describing why their\
          \ signatures are required"
      recipientParticipantIds:
        type: "array"
        description: "A list of one or more participant IDs to create the reminder\
          \ on. The reminder will be sent to all the participants specified by the\
          \ list of participant IDs."
        items:
          type: "string"
      reminderId:
        type: "string"
        description: "An identifier of the reminder resource created on the server.\
          \ Only provided in GET. Cannot be provided in POST request. If provided\
          \ in POST, it will be ignored"
      startReminderCounterFrom:
        type: "string"
        description: "Reminder can be sent based on when the agreement becomes available\
          \ or when the reminder is created<br><b>AGREEMENT_AVAILABILITY :</b><br>If\
          \ the agreement is not available to the participantSet at the time of reminder\
          \ creation, the reminder will be sent for the first time, only when the\
          \ agreement becomes available to the participantSet taking the firstReminderDelay\
          \ into account. Subsequent reminders will be sent based on the frequency\
          \ specified.<br>If the agreement is already available to the participantSet\
          \ at the time of reminder creation, the first reminder will be sent after\
          \ the delay specified by firstReminderDelay from the reminder creation time.<br><br><b>REMINDER_CREATION\
          \ :</b><br>The first reminder will be sent after the delay specified by\
          \ firstReminderDelay from the reminder creation time only if the agreement\
          \ is available at that time. Subsequent reminders will be triggered based\
          \ on the frequency specified and will be sent only if the agreement is available\
          \ at that time.<br>For agreements in authoring state, creating reminder\
          \ with startReminderCounterFrom as REMINDER_CREATION is not allowed.<br>Note\
          \ : If firstReminderDelay, frequency and startReminderCounterFrom fields\
          \ are not specified, reminder will be sent right now if the agreement is\
          \ available. If agreement is not available, an error will be thrown."
        enum:
        - "AGREEMENT_AVAILABILITY"
        - "REMINDER_CREATION"
      status:
        type: "string"
        description: "Current status of the reminder"
        enum:
        - "ACTIVE"
    example:
      note: "note"
      lastSentDate: "2000-01-23"
      nextSentDate: "2000-01-23"
      reminderId: "reminderId"
      firstReminderDelay: 0
      recipientParticipantIds:
      - "recipientParticipantIds"
      - "recipientParticipantIds"
      startReminderCounterFrom: "AGREEMENT_AVAILABILITY"
      frequency: "DAILY_UNTIL_SIGNED"
      status: "ACTIVE"
  RemindersResponse:
    required:
    - "reminderInfoList"
    properties:
      reminderInfoList:
        type: "array"
        description: "A list of one or more reminders created on the agreement specified\
          \ by the unique identifier agreementId by the user invoking the API."
        items:
          $ref: "#/definitions/ReminderInfo"
    example:
      reminderInfoList:
      - note: "note"
        lastSentDate: "2000-01-23"
        nextSentDate: "2000-01-23"
        reminderId: "reminderId"
        firstReminderDelay: 0
        recipientParticipantIds:
        - "recipientParticipantIds"
        - "recipientParticipantIds"
        startReminderCounterFrom: "AGREEMENT_AVAILABILITY"
        frequency: "DAILY_UNTIL_SIGNED"
        status: "ACTIVE"
      - note: "note"
        lastSentDate: "2000-01-23"
        nextSentDate: "2000-01-23"
        reminderId: "reminderId"
        firstReminderDelay: 0
        recipientParticipantIds:
        - "recipientParticipantIds"
        - "recipientParticipantIds"
        startReminderCounterFrom: "AGREEMENT_AVAILABILITY"
        frequency: "DAILY_UNTIL_SIGNED"
        status: "ACTIVE"
  SecurityOption:
    properties:
      openPassword:
        type: "string"
        description: "The secondary password that will be used to secure the PDF document.\
          \ Note that AdobeSign will never show this password to anyone, so you will\
          \ need to separately communicate it to any relevant parties"
    example:
      openPassword: "openPassword"
  SendOptions:
    properties:
      completionEmails:
        type: "string"
        description: "Control notification mails for agreement completion events -\
          \ COMPLETED, CANCELLED, EXPIRED and REJECTED"
        enum:
        - "ALL"
        - "NONE"
      inFlightEmails:
        type: "string"
        description: "Control notification mails for agreement-in-process events -\
          \ DELEGATED, REPLACED"
        enum:
        - "ALL"
        - "NONE"
      initEmails:
        type: "string"
        description: "Control notification mails for Agreement initiation events -\
          \ ACTION_REQUESTED and CREATED"
        enum:
        - "ALL"
        - "NONE"
    example:
      initEmails: "ALL"
      inFlightEmails: "ALL"
      completionEmails: "ALL"
  SenderInfo:
    required:
    - "company"
    - "email"
    - "name"
    - "participantId"
    - "self"
    - "status"
    properties:
      company:
        type: "string"
        description: "Company of the sender, if available."
      email:
        type: "string"
        description: "Email of the sender of the agreement."
      name:
        type: "string"
        description: "Name of the sender, if available."
      participantId:
        type: "string"
        description: " The unique identifier of the sender of the agreement."
      self:
        type: "boolean"
        description: "True if the sender is the same user that is calling the API."
      status:
        type: "string"
        description: "The agreement status with respect to the participant set. This\
          \ cannot be changed as part of the PUT call."
        enum:
        - "CANCELLED"
        - "COMPLETED"
        - "EXPIRED"
        - "NOT_YET_VISIBLE"
        - "WAITING_FOR_AUTHORING"
        - "WAITING_FOR_MY_DELEGATION"
        - "WAITING_FOR_MY_ACCEPTANCE"
        - "WAITING_FOR_MY_ACKNOWLEDGEMENT"
        - "WAITING_FOR_MY_APPROVAL"
        - "WAITING_FOR_MY_FORM_FILLING"
        - "WAITING_FOR_MY_SIGNATURE"
        - "WAITING_FOR_OTHERS"
    example:
      participantId: "participantId"
      name: "name"
      self: true
      company: "company"
      email: "email"
      status: "CANCELLED"
  ShareCreationInfo:
    required:
    - "email"
    properties:
      email:
        type: "string"
        description: "The email address of the member with whom the agreement will\
          \ be shared"
      message:
        type: "string"
        description: "Optional message to the sharee"
  ShareCreationInfoList:
    required:
    - "shareCreationInfo"
    properties:
      shareCreationInfo:
        type: "array"
        description: "List of ShareCreationInfo"
        items:
          $ref: "#/definitions/ShareCreationInfo"
  ShareCreationResponse:
    required:
    - "email"
    - "participantId"
    properties:
      email:
        type: "string"
        description: "The email address that was requested"
      participantId:
        type: "string"
        description: "The unique identifier of the participant"
    example:
      participantId: "participantId"
      email: "email"
  ShareCreationResponseList:
    required:
    - "shareCreationResponseList"
    properties:
      shareCreationResponseList:
        type: "array"
        description: "List of ShareCreationResponse"
        items:
          $ref: "#/definitions/ShareCreationResponse"
    example:
      shareCreationResponseList:
      - participantId: "participantId"
        email: "email"
      - participantId: "participantId"
        email: "email"
  ShareParticipantInfo:
    required:
    - "company"
    - "email"
    - "name"
    - "participantId"
    - "sharerParticipantId"
    properties:
      company:
        type: "string"
        description: "Company of the sharee participant, if available."
      email:
        type: "string"
        description: "Email of the sharee participant of the agreement."
      name:
        type: "string"
        description: "Name of the sharee participant, if available."
      participantId:
        type: "string"
        description: "The unique identifier of the sharee participant of the agreement."
      sharerParticipantId:
        type: "string"
        description: "The unique identifier of the participant who shared the agreement."
    example:
      participantId: "participantId"
      name: "name"
      sharerParticipantId: "sharerParticipantId"
      company: "company"
      email: "email"
  SigningUrl:
    required:
    - "email"
    - "esignUrl"
    properties:
      email:
        type: "string"
        description: "The email address of the signer associated with this signing\
          \ url"
      esignUrl:
        type: "string"
        description: "The email address of the signer associated with this signing\
          \ url"
    example:
      esignUrl: "esignUrl"
      email: "email"
  SigningUrlResponse:
    required:
    - "signingUrlSetInfos"
    properties:
      signingUrlSetInfos:
        type: "array"
        description: "An array of urls for signer sets involved in this agreement."
        items:
          $ref: "#/definitions/SigningUrlSetInfo"
    example:
      signingUrlSetInfos:
      - signingUrls:
        - esignUrl: "esignUrl"
          email: "email"
        - esignUrl: "esignUrl"
          email: "email"
        signingUrlSetName: "signingUrlSetName"
      - signingUrls:
        - esignUrl: "esignUrl"
          email: "email"
        - esignUrl: "esignUrl"
          email: "email"
        signingUrlSetName: "signingUrlSetName"
  SigningUrlSetInfo:
    required:
    - "signingUrls"
    properties:
      signingUrlSetName:
        type: "string"
        description: "The name of the current signer set. Returned only, if the API\
          \ caller is the sender of agreement"
      signingUrls:
        type: "array"
        description: "An array of urls for current signer set."
        items:
          $ref: "#/definitions/SigningUrl"
    example:
      signingUrls:
      - esignUrl: "esignUrl"
        email: "email"
      - esignUrl: "esignUrl"
        email: "email"
      signingUrlSetName: "signingUrlSetName"
  SupportingDocument:
    required:
    - "displayLabel"
    - "fieldName"
    - "id"
    - "mimeType"
    - "numPages"
    properties:
      displayLabel:
        type: "string"
        description: "Display name of the document"
      fieldName:
        type: "string"
        description: "The name of the supporting document field"
      id:
        type: "string"
        description: "Id representing the document"
      mimeType:
        type: "string"
        description: "Mime-type of the document"
      numPages:
        type: "integer"
        format: "int32"
        description: "Number of pages in the document"
    example:
      displayLabel: "displayLabel"
      numPages: 0
      fieldName: "fieldName"
      id: "id"
      mimeType: "mimeType"
  URLFileInfo:
    required:
    - "mimeType"
    - "name"
    - "url"
    properties:
      mimeType:
        type: "string"
        description: "The mime type of the referenced file, used to determine if the\
          \ file can be accepted and the necessary conversion steps can be performed"
      name:
        type: "string"
        description: "The original system file name of the document being sent"
      url:
        type: "string"
        description: "A publicly accessible URL for retrieving the raw file content"
    example:
      name: "name"
      mimeType: "mimeType"
      url: "url"
  UserAgreement:
    required:
    - "displayDate"
    - "displayParticipantSetInfos"
    - "esign"
    - "hidden"
    - "latestVersionId"
    - "name"
    properties:
      displayDate:
        type: "string"
        format: "date"
        description: "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ.\
          \ For example, e.g 2016-02-25T18:46:19Z represents UTC time"
      displayParticipantSetInfos:
        type: "array"
        description: "The most relevant current user set for the agreement. It is\
          \ typically the next signer if the agreement is from the current user, or\
          \ the sender if received from another user"
        items:
          $ref: "#/definitions/DisplayParticipantSetInfo"
      esign:
        type: "boolean"
        description: "True if this is an e-sign document"
      hidden:
        type: "boolean"
        description: "True if agreement is hidden for the user"
      id:
        type: "string"
        description: "The unique identifier of the agreement.If provided in POST,\
          \ it will simply be ignored"
      latestVersionId:
        type: "string"
        description: "A version ID which uniquely identifies the current version of\
          \ the agreement"
      name:
        type: "string"
        description: "Name of the Agreement"
      status:
        type: "string"
        description: "This is a server generated attribute which provides the detailed\
          \ status of an agreement with respect to the apiCaller"
        enum:
        - "WAITING_FOR_MY_SIGNATURE"
        - "WAITING_FOR_MY_APPROVAL"
        - "WAITING_FOR_MY_DELEGATION"
        - "WAITING_FOR_MY_ACKNOWLEDGEMENT"
        - "WAITING_FOR_MY_ACCEPTANCE"
        - "WAITING_FOR_MY_FORM_FILLING"
        - "OUT_FOR_SIGNATURE"
        - "OUT_FOR_APPROVAL"
        - "OUT_FOR_DELIVERY"
        - "OUT_FOR_ACCEPTANCE"
        - "OUT_FOR_FORM_FILLING"
        - "SIGNED"
        - "APPROVED"
        - "FORM_FILLED"
        - "DELIVERED"
        - "ACCEPTED"
        - "ARCHIVED"
        - "CANCELLED"
        - "EXPIRED"
        - "WAITING_FOR_AUTHORING"
        - "WAITING_FOR_PREFILL"
        - "DRAFT"
        - "DOCUMENTS_NOT_YET_PROCESSED"
        - "WAITING_FOR_MY_VERIFICATION"
        - "WAITING_FOR_VERIFICATION"
    example:
      hidden: true
      displayDate: "2000-01-23"
      esign: true
      name: "name"
      displayParticipantSetInfos:
      - displayUserSetMemberInfos:
        - fullName: "fullName"
          company: "company"
          email: "email"
        - fullName: "fullName"
          company: "company"
          email: "email"
        displayUserSetName: "displayUserSetName"
      - displayUserSetMemberInfos:
        - fullName: "fullName"
          company: "company"
          email: "email"
        - fullName: "fullName"
          company: "company"
          email: "email"
        displayUserSetName: "displayUserSetName"
      latestVersionId: "latestVersionId"
      id: "id"
      status: "WAITING_FOR_MY_SIGNATURE"
  UserAgreements:
    required:
    - "page"
    - "userAgreementList"
    properties:
      page:
        description: "Pagination information for navigating through the response"
        $ref: "#/definitions/PageInfo"
      userAgreementList:
        type: "array"
        description: "An array of UserAgreement items"
        items:
          $ref: "#/definitions/UserAgreement"
    example:
      userAgreementList:
      - hidden: true
        displayDate: "2000-01-23"
        esign: true
        name: "name"
        displayParticipantSetInfos:
        - displayUserSetMemberInfos:
          - fullName: "fullName"
            company: "company"
            email: "email"
          - fullName: "fullName"
            company: "company"
            email: "email"
          displayUserSetName: "displayUserSetName"
        - displayUserSetMemberInfos:
          - fullName: "fullName"
            company: "company"
            email: "email"
          - fullName: "fullName"
            company: "company"
            email: "email"
          displayUserSetName: "displayUserSetName"
        latestVersionId: "latestVersionId"
        id: "id"
        status: "WAITING_FOR_MY_SIGNATURE"
      - hidden: true
        displayDate: "2000-01-23"
        esign: true
        name: "name"
        displayParticipantSetInfos:
        - displayUserSetMemberInfos:
          - fullName: "fullName"
            company: "company"
            email: "email"
          - fullName: "fullName"
            company: "company"
            email: "email"
          displayUserSetName: "displayUserSetName"
        - displayUserSetMemberInfos:
          - fullName: "fullName"
            company: "company"
            email: "email"
          - fullName: "fullName"
            company: "company"
            email: "email"
          displayUserSetName: "displayUserSetName"
        latestVersionId: "latestVersionId"
        id: "id"
        status: "WAITING_FOR_MY_SIGNATURE"
      page:
        nextCursor: "nextCursor"
  VaultingInfo:
    properties:
      enabled:
        type: "boolean"
        description: "For accounts set up for document vaulting and the option to\
          \ enable per agreement, this determines whether the document is to be vaulted"
    example:
      enabled: true
  VisibilityInfo:
    required:
    - "visibility"
    properties:
      visibility:
        type: "string"
        description: "Specifies the visibility. The possible values are HIDE or SHOW"
        enum:
        - "SHOW"
        - "HIDE"
