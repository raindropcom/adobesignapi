/*
 * AdobeSign Aggreements API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 6.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package agreements

type fileInfo struct {
	DefaultValue string `json:"defaultValue"`
	FieldName    string `json:"fieldName"`
}

type document struct {
	ID       string `json:"id"`
	Label    string `json:"label"`
	NumPages int    `json:"numPages"`
	MimeType string `json:"mimeType"`
	Name     string `json:"name"`
}

type URLFileInfo struct {
	MimeType string `json:"mimeType"`
	Name     string `json:"name"`
	URL      string `json:"url"`
}

type formFieldLayerTemplates struct {
	Document            document
	Label               string      `json:"label"`
	LibraryDocumentID   string      `json:"libraryDocumentId"`
	TransientDocumentID string      `json:"transientDocumentId"`
	URLFileInfo         URLFileInfo `json:"urlFileInfo"`
}

type AgreementInfo struct {
	// A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.
	Ccs []AgreementCcInfo `json:"ccs,omitempty"`
	// Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
	CreatedDate string `json:"createdDate,omitempty"`
	// Device info of the offline device. It should only be provided in case of offline agreement creation.
	DeviceInfo *OfflineDeviceInfo `json:"deviceInfo,omitempty"`
	// If set to true, enable limited document visibility. Should not be provided in offline agreement creation.
	DocumentVisibilityEnabled bool `json:"documentVisibilityEnabled,omitempty"`
	// Email configurations for the agreement. Should not be provided in offline agreement creation.
	EmailOption *EmailOption `json:"emailOption,omitempty"`
	// Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.
	ExpirationTime string `json:"expirationTime,omitempty"`
	// An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.
	ExternalId *ExternalId `json:"externalId,omitempty"`
	// A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
	FileInfos []FileInfo `json:"fileInfos"`
	// Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value canâ€™t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.
	FirstReminderDelay int32 `json:"firstReminderDelay,omitempty"`
	// The unique identifier of the agreement.If provided in POST, it will simply be ignored
	Id string `json:"id,omitempty"`
	// The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
	Locale string `json:"locale,omitempty"`
	// An optional message to the participants, describing what is being sent or why their signature is required
	Message string `json:"message,omitempty"`
	// The name of the agreement that will be used to identify it, in emails, website and other places
	Name string `json:"name"`
	// A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc ), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document
	ParticipantSetsInfo []ParticipantSetInfo `json:"participantSetsInfo"`
	// URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.
	PostSignOption *PostSignOption `json:"postSignOption,omitempty"`
	// Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation.
	ReminderFrequency string `json:"reminderFrequency,omitempty"`
	// Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.
	SecurityOption *SecurityOption `json:"securityOption,omitempty"`
	// Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored
	SenderEmail string `json:"senderEmail,omitempty"`
	// Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system
	SignatureType string `json:"signatureType"`
	// The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID
	State string `json:"state"`
	// This is a server generated attribute which provides the detailed status of an agreement.
	Status string `json:"status,omitempty"`
	// Vaulting properties that allows Adobe Sign to securely store documents with a vault provider
	VaultingInfo *VaultingInfo `json:"vaultingInfo,omitempty"`
	// The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.
	WorkflowId              string `json:"workflowId,omitempty"`
	MergeFileInfo           []fileInfo
	FormFieldLayerTemplates formFieldLayerTemplates
}
