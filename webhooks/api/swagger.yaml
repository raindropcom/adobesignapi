---
swagger: "2.0"
info:
  version: "6.0.0"
  title: "AdobeSign WebHooks APIs"
basePath: "/api/rest/v6"
paths:
  /webhooks:
    get:
      summary: "Retrieves webhooks for a user."
      operationId: "getWebhooks"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_read')\" target=\"oauthDoc\"\
          >webhook_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "showInActiveWebhooks"
        in: "query"
        description: "A query parameter to fetch all the inactive webhooks along with\
          \ the active webhooks."
        required: false
        type: "boolean"
        x-exportParamName: "ShowInActiveWebhooks"
        x-optionalDataType: "Bool"
      - name: "scope"
        in: "query"
        description: "Scope of webhook. The possible values are ACCOUNT, GROUP, USER\
          \ or RESOURCE"
        required: false
        type: "string"
        enum:
        - "ACCOUNT"
        - "GROUP"
        - "USER"
        - "RESOURCE"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "resourceType"
        in: "query"
        description: "The type of resource on which webhook was created. The possible\
          \ values are AGREEMENT, WIDGET and MEGASIGN."
        required: false
        type: "string"
        enum:
        - "AGREEMENT"
        - "WIDGET"
        - "MEGASIGN"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      - name: "cursor"
        in: "query"
        description: "Used to navigate through the pages. If not provided, returns\
          \ the first page."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "pageSize"
        in: "query"
        description: "Number of intended items in the response page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/UserWebhooks"
      security:
      - oauth2:
        - "webhook_read"
    post:
      summary: "Creates a webhook."
      operationId: "createWebhook"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_write')\" target=\"oauthDoc\"\
          >webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - in: "body"
        name: "WebhookInfo"
        description: "Information about the webhook that you want to create"
        required: true
        schema:
          $ref: "#/definitions/WebhookInfo"
        x-exportParamName: "WebhookInfo"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/WebhookCreationResponse"
      security:
      - oauth2:
        - "webhook_write"
  /webhooks/{webhookId}:
    get:
      summary: "Retrieves the details of a webhook."
      operationId: "getWebhookInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_read')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_read')\" target=\"oauthDoc\"\
          >webhook_read</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-None-Match"
        in: "header"
        description: "Pass the value of the e-tag header obtained from the previous\
          \ response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the\
          \ resource hasn't changed."
        required: false
        type: "string"
        x-exportParamName: "IfNoneMatch"
        x-optionalDataType: "String"
      - name: "webhookId"
        in: "path"
        description: "The webhook identifier, as returned by the webhook creation\
          \ API or retrieved from the API to fetch webhooks."
        required: true
        type: "string"
        x-exportParamName: "WebhookId"
      responses:
        "200":
          description: "No response was specified"
          schema:
            $ref: "#/definitions/WebhookInfo"
      security:
      - oauth2:
        - "webhook_read"
    put:
      summary: "Updates a webhook."
      operationId: "updateWebhook"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_write')\" target=\"oauthDoc\"\
          >webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "webhookId"
        in: "path"
        description: "The webhook identifier, as returned by the webhook creation\
          \ API or retrieved from the API to fetch webhooks."
        required: true
        type: "string"
        x-exportParamName: "WebhookId"
      - in: "body"
        name: "WebhookInfo"
        description: "Information necessary to update a webhook"
        required: true
        schema:
          $ref: "#/definitions/WebhookInfo"
        x-exportParamName: "WebhookInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "webhook_write"
    delete:
      summary: "Deletes a webhook."
      operationId: "deleteWebhook"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_retention')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_retention')\" target=\"oauthDoc\"\
          >webhook_retention</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "webhookId"
        in: "path"
        description: "The webhook identifier, as returned by the webhook creation\
          \ API or retrieved from the API to fetch webhooks."
        required: true
        type: "string"
        x-exportParamName: "WebhookId"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "webhook_retention"
  /webhooks/{webhookId}/state:
    put:
      summary: "Updates the state of a webhook identified by webhookId in the path."
      operationId: "updateWebhookState"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"\
          this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li\
          \ style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('webhook_write')\"\
          \ oncontextmenu=\"this.href=oauthDoc('webhook_write')\" target=\"oauthDoc\"\
          >webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'."
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "x-api-user"
        in: "header"
        description: "The userId or email of API caller using the account or group\
          \ token in the format <b>userid:{userId} OR email:{email}.</b> If it is\
          \ not specified, then the caller is inferred from the token."
        required: false
        type: "string"
        x-exportParamName: "XApiUser"
        x-optionalDataType: "String"
      - name: "x-on-behalf-of-user"
        in: "header"
        description: "The userId or email in the format <b>userid:{userId} OR email:{email}.</b>\
          \ of the user that has shared his/her account"
        required: false
        type: "string"
        x-exportParamName: "XOnBehalfOfUser"
        x-optionalDataType: "String"
      - name: "If-Match"
        in: "header"
        description: "The server will only update the resource if it matches the listed\
          \ ETag otherwise error RESOURCE_MODIFIED(412) is returned."
        required: true
        type: "string"
        x-exportParamName: "IfMatch"
      - name: "webhookId"
        in: "path"
        description: "The webhook identifier, as returned by the webhook creation\
          \ API or retrieved from the API to fetch webhooks."
        required: true
        type: "string"
        x-exportParamName: "WebhookId"
      - in: "body"
        name: "WebhookStateInfo"
        required: true
        schema:
          $ref: "#/definitions/WebhookStateInfo"
        x-exportParamName: "WebhookStateInfo"
      responses:
        "200":
          description: "No response was specified"
      security:
      - oauth2:
        - "webhook_write"
definitions:
  PageInfo:
    required:
    - "nextCursor"
    properties:
      nextCursor:
        type: "string"
        description: "Used to navigate to the next page. If not\_returned, there are\
          \ no further pages."
    example:
      nextCursor: "nextCursor"
  UserWebhook:
    required:
    - "id"
    - "name"
    - "scope"
    - "webhookSubscriptionEvents"
    - "webhookUrlInfo"
    properties:
      applicationDisplayName:
        type: "string"
        description: "The display name of the application through which webhook is\
          \ created"
      applicationName:
        type: "string"
        description: "The name of the application through which webhook is created"
      id:
        type: "string"
        description: "The unique identifier of the webhook. Will only be returned\
          \ in GET request. Can't be modified in PUT request"
      lastModified:
        type: "string"
        format: "date"
        description: "Timestamp when the webhook was last updated. Will only be returned\
          \ in GET request. Can't be modified in PUT request"
      name:
        type: "string"
        description: "The name of the webhook"
      resourceId:
        type: "string"
        description: "Id of the resource type for which you want to create webhook.\
          \ Provide agreementId if webhook needs to be created for an agreement. Similarly,\
          \ widgetId if webhook needs to be created for a widget and megaSignId if\
          \ webhook needs to be created for a megaSign. Need to specify only if scope\
          \ is 'RESOURCE'. Can't be modified in PUT request"
      resourceType:
        type: "string"
        description: "The resource for which you want to create webhook. Need to specify\
          \ only if scope is 'RESOURCE'. Can't be modified in PUT request. The possible\
          \ values are AGREEMENT, WIDGET and MEGASIGN."
        enum:
        - "AGREEMENT"
        - "WIDGET"
        - "MEGASIGN"
      scope:
        type: "string"
        description: "Scope of webhook. Can't be modified in PUT request. The possible\
          \ values are ACCOUNT, GROUP, USER or RESOURCE"
        enum:
        - "ACCOUNT"
        - "GROUP"
        - "USER"
        - "RESOURCE"
      status:
        type: "string"
        description: "Status of the webhook. Determines whether the webhook will be\
          \ actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive\
          \ event requests. If INACTIVE, this webhook will not receive event requests.\
          \ Can't provide status in POST/PUT requests."
        enum:
        - "ACTIVE"
        - "INACTIVE"
      webhookSubscriptionEvents:
        type: "array"
        description: "Determines events for which the webhook is triggered. The possible\
          \ values are <br> AGREEMENT_CREATED : When an agreement is created <br>,\n\
          AGREEMENT_ACTION_DELEGATED : When an agreement is delegated <br>,\nAGREEMENT_RECALLED\
          \ : When an agreement is recalled <br>,\nAGREEMENT_REJECTED : When an agreement\
          \ is rejected <br>,\nAGREEMENT_EXPIRED : When an agreement expires <br>,\n\
          AGREEMENT_ACTION_COMPLETED : When an agreement action is completed <br>,\n\
          AGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed <br>,\n\
          AGREEMENT_EMAIL_VIEWED : When an agreement's email is viewed <br>,\nAGREEMENT_MODIFIED\
          \ : When an agreement is modified <br>,\nAGREEMENT_SHARED : When an agreement\
          \ is shared <br>,\nAGREEMENT_VAULTED : When an agreement is vaulted <br>,\n\
          AGREEMENT_ACTION_REQUESTED : When an agreement action is requested <br>,\n\
          AGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement\
          \ <br>,\nAGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement\
          \ is auto-cancelled due to conversion problem <br>,\nAGREEMENT_DOCUMENTS_DELETED\
          \ : When an agreement documents are deleted <br>,\nAGREEMENT_EMAIL_BOUNCED\
          \ : When an agreement email gets bounced <br>,\nAGREEMENT_KBA_AUTHENTICATED\
          \ : When an agreement KBA is authenticated <br>,\nAGREEMENT_OFFLINE_SYNC\
          \ : When an agreement is synced offline <br>,\nAGREEMENT_USER_ACK_AGREEMENT_MODIFIED\
          \ : User Acknowledgement when an agreement is modified <br>,\nAGREEMENT_UPLOADED_BY_SENDER\
          \ : When an agreement is uploaded by sender <br>,\nAGREEMENT_WEB_IDENTITY_AUTHENTICATED\
          \ : When an agreement web identity is authenticated <br>,\nAGREEMENT_ALL\
          \ : All the supported agreement events for Webhooks <br>,\nMEGASIGN_CREATED\
          \ : When a megaSign is created <br>,\nMEGASIGN_RECALLED : When a megaSign\
          \ is recalled <br>,\nMEGASIGN_SHARED : When a megaSign is shared <br>,\n\
          MEGASIGN_ALL : All the supported megaSign events for Webhooks <br>,\nWIDGET_CREATED\
          \ : When a widget is created <br>,\nWIDGET_MODIFIED : When a widget is modified\
          \ <br>,\nWIDGET_SHARED : When a widget is shared <br>,\nWIDGET_ENABLED :\
          \ When a widget is enabled <br>,\nWIDGET_DISABLED : When a widget is disabled\
          \ <br>,\nWIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a widget is auto-cancelled\
          \ due to conversion problem <br>,\nWIDGET_ALL : All the supported widget\
          \ events for Webhooks"
        items:
          type: "string"
          enum:
          - "AGREEMENT_CREATED"
          - "AGREEMENT_ACTION_DELEGATED"
          - "AGREEMENT_RECALLED"
          - "AGREEMENT_REJECTED"
          - "AGREEMENT_EXPIRED"
          - "AGREEMENT_ACTION_COMPLETED"
          - "AGREEMENT_WORKFLOW_COMPLETED"
          - "AGREEMENT_EMAIL_VIEWED"
          - "AGREEMENT_MODIFIED"
          - "AGREEMENT_SHARED"
          - "AGREEMENT_VAULTED"
          - "AGREEMENT_ACTION_REQUESTED"
          - "AGREEMENT_ACTION_REPLACED_SIGNER"
          - "AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM"
          - "AGREEMENT_DOCUMENTS_DELETED"
          - "AGREEMENT_EMAIL_BOUNCED"
          - "AGREEMENT_KBA_AUTHENTICATED"
          - "AGREEMENT_OFFLINE_SYNC"
          - "AGREEMENT_USER_ACK_AGREEMENT_MODIFIED"
          - "AGREEMENT_UPLOADED_BY_SENDER"
          - "AGREEMENT_WEB_IDENTITY_AUTHENTICATED"
          - "AGREEMENT_ALL"
          - "MEGASIGN_CREATED"
          - "MEGASIGN_RECALLED"
          - "MEGASIGN_SHARED"
          - "MEGASIGN_ALL"
          - "WIDGET_CREATED"
          - "WIDGET_MODIFIED"
          - "WIDGET_SHARED"
          - "WIDGET_ENABLED"
          - "WIDGET_DISABLED"
          - "WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM"
          - "WIDGET_ALL"
      webhookUrlInfo:
        description: "Info of webhook url"
        $ref: "#/definitions/WebhookUrlInfo"
    example:
      resourceId: "resourceId"
      webhookUrlInfo:
        url: "url"
      webhookSubscriptionEvents:
      - "AGREEMENT_CREATED"
      - "AGREEMENT_CREATED"
      scope: "ACCOUNT"
      name: "name"
      id: "id"
      lastModified: "2000-01-23"
      applicationDisplayName: "applicationDisplayName"
      applicationName: "applicationName"
      resourceType: "AGREEMENT"
      status: "ACTIVE"
  UserWebhooks:
    required:
    - "page"
    - "userWebhookList"
    properties:
      page:
        description: "Pagination information for navigating through the response"
        $ref: "#/definitions/PageInfo"
      userWebhookList:
        type: "array"
        description: "An array of widget items"
        items:
          $ref: "#/definitions/UserWebhook"
    example:
      userWebhookList:
      - resourceId: "resourceId"
        webhookUrlInfo:
          url: "url"
        webhookSubscriptionEvents:
        - "AGREEMENT_CREATED"
        - "AGREEMENT_CREATED"
        scope: "ACCOUNT"
        name: "name"
        id: "id"
        lastModified: "2000-01-23"
        applicationDisplayName: "applicationDisplayName"
        applicationName: "applicationName"
        resourceType: "AGREEMENT"
        status: "ACTIVE"
      - resourceId: "resourceId"
        webhookUrlInfo:
          url: "url"
        webhookSubscriptionEvents:
        - "AGREEMENT_CREATED"
        - "AGREEMENT_CREATED"
        scope: "ACCOUNT"
        name: "name"
        id: "id"
        lastModified: "2000-01-23"
        applicationDisplayName: "applicationDisplayName"
        applicationName: "applicationName"
        resourceType: "AGREEMENT"
        status: "ACTIVE"
      page:
        nextCursor: "nextCursor"
  WebhookAgreementEvents:
    properties:
      includeDetailedInfo:
        type: "boolean"
        description: "Determines whether agreement detailed info will be returned\
          \ in the response payload"
      includeDocumentsInfo:
        type: "boolean"
        description: "Determines whether document info will be returned in the response\
          \ payload"
      includeParticipantsInfo:
        type: "boolean"
        description: "Determines whether participants info will be returned in the\
          \ response payload"
      includeSignedDocuments:
        type: "boolean"
        description: "Determines whether documents will be returned in webhook response\
          \ payload. If set to true, signed document will be returned in base 64 encoded\
          \ format in JSON when signing is complete"
    example:
      includeDetailedInfo: true
      includeParticipantsInfo: true
      includeSignedDocuments: true
      includeDocumentsInfo: true
  WebhookConditionalParams:
    properties:
      webhookAgreementEvents:
        description: "Conditional parameters for webhook agreement events"
        $ref: "#/definitions/WebhookAgreementEvents"
      webhookMegaSignEvents:
        description: "Conditional parameters for webhook megasign events"
        $ref: "#/definitions/WebhookMegaSignEvents"
      webhookWidgetEvents:
        description: "Conditional parameters for webhook widget events"
        $ref: "#/definitions/WebhookWidgetEvents"
    example:
      webhookWidgetEvents:
        includeDetailedInfo: true
        includeParticipantsInfo: true
        includeDocumentsInfo: true
      webhookMegaSignEvents:
        includeDetailedInfo: true
      webhookAgreementEvents:
        includeDetailedInfo: true
        includeParticipantsInfo: true
        includeSignedDocuments: true
        includeDocumentsInfo: true
  WebhookCreationResponse:
    properties:
      id:
        type: "string"
        description: "An identifier of the webhook resource created"
    description: "A JSON  that contains the id of the newly created webhook"
    example:
      id: "id"
  WebhookInfo:
    required:
    - "name"
    - "scope"
    - "state"
    - "webhookSubscriptionEvents"
    - "webhookUrlInfo"
    properties:
      applicationDisplayName:
        type: "string"
        description: "The display name of the application through which webhook is\
          \ created"
      applicationName:
        type: "string"
        description: "The name of the application through which webhook is created"
      created:
        type: "string"
        format: "date"
        description: "Timestamp when the webhook was created. Will only be returned\
          \ in GET request. Can't be modified in PUT request"
      id:
        type: "string"
        description: "The unique identifier of the webhook. Will only be returned\
          \ in GET request. Can't be modified in PUT request"
      lastModified:
        type: "string"
        format: "date"
        description: "Timestamp when the webhook was last updated. Will only be returned\
          \ in GET request. Can't be modified in PUT request"
      name:
        type: "string"
        description: "The name of the webhook"
      resourceId:
        type: "string"
        description: "Id of the resource type for which you want to create webhook.\
          \ Provide agreementId if webhook needs to be created for an agreement. Similarly,\
          \ widgetId if webhook needs to be created for a widget and megaSignId if\
          \ webhook needs to be created for a megaSign. Need to specify only if scope\
          \ is 'RESOURCE'. Can't be modified in PUT request"
      resourceType:
        type: "string"
        description: "The resource for which you want to create webhook. Need to specify\
          \ only if scope is 'RESOURCE'. Can't be modified in PUT request. The possible\
          \ values are AGREEMENT, WIDGET and MEGASIGN."
        enum:
        - "AGREEMENT"
        - "WIDGET"
        - "MEGASIGN"
      scope:
        type: "string"
        description: "Scope of webhook. Can't be modified in PUT request. The possible\
          \ values are ACCOUNT, GROUP, USER or RESOURCE"
        enum:
        - "ACCOUNT"
        - "GROUP"
        - "USER"
        - "RESOURCE"
      state:
        type: "string"
        description: "The state in which the webhook should be created"
        enum:
        - "ACTIVE"
      status:
        type: "string"
        description: "Status of the webhook. Determines whether the webhook will be\
          \ actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive\
          \ event requests. If INACTIVE, this webhook will not receive event requests.\
          \ Can't provide status in POST/PUT requests."
        enum:
        - "ACTIVE"
        - "INACTIVE"
      webhookConditionalParams:
        description: "Conditions which webhook creator can specify for the payload\
          \ while creating or updating a webhook"
        $ref: "#/definitions/WebhookConditionalParams"
      webhookSubscriptionEvents:
        type: "array"
        description: "Determines events for which the webhook is triggered. The possible\
          \ values are <br> AGREEMENT_CREATED : When an agreement is created <br>,\n\
          AGREEMENT_ACTION_DELEGATED : When an agreement is delegated <br>,\nAGREEMENT_RECALLED\
          \ : When an agreement is recalled <br>,\nAGREEMENT_REJECTED : When an agreement\
          \ is rejected <br>,\nAGREEMENT_EXPIRED : When an agreement expires <br>,\n\
          AGREEMENT_ACTION_COMPLETED : When an agreement action is completed <br>,\n\
          AGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed <br>,\n\
          AGREEMENT_EMAIL_VIEWED : When an agreement's email is viewed <br>,\nAGREEMENT_MODIFIED\
          \ : When an agreement is modified <br>,\nAGREEMENT_SHARED : When an agreement\
          \ is shared <br>,\nAGREEMENT_VAULTED : When an agreement is vaulted <br>,\n\
          AGREEMENT_ACTION_REQUESTED : When an agreement action is requested <br>,\n\
          AGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement\
          \ <br>,\nAGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement\
          \ is auto-cancelled due to conversion problem <br>,\nAGREEMENT_DOCUMENTS_DELETED\
          \ : When an agreement documents are deleted <br>,\nAGREEMENT_EMAIL_BOUNCED\
          \ : When an agreement email gets bounced <br>,\nAGREEMENT_KBA_AUTHENTICATED\
          \ : When an agreement KBA is authenticated <br>,\nAGREEMENT_OFFLINE_SYNC\
          \ : When an agreement is synced offline <br>,\nAGREEMENT_USER_ACK_AGREEMENT_MODIFIED\
          \ : User Acknowledgement when an agreement is modified <br>,\nAGREEMENT_UPLOADED_BY_SENDER\
          \ : When an agreement is uploaded by sender <br>,\nAGREEMENT_WEB_IDENTITY_AUTHENTICATED\
          \ : When an agreement web identity is authenticated <br>,\nAGREEMENT_ALL\
          \ : All the supported agreement events for Webhooks <br>,\nMEGASIGN_CREATED\
          \ : When a megaSign is created <br>,\nMEGASIGN_RECALLED : When a megaSign\
          \ is recalled <br>,\nMEGASIGN_SHARED : When a megaSign is shared <br>,\n\
          MEGASIGN_ALL : All the supported megaSign events for Webhooks <br>,\nWIDGET_CREATED\
          \ : When a widget is created <br>,\nWIDGET_MODIFIED : When a widget is modified\
          \ <br>,\nWIDGET_SHARED : When a widget is shared <br>,\nWIDGET_ENABLED :\
          \ When a widget is enabled <br>,\nWIDGET_DISABLED : When a widget is disabled\
          \ <br>,\nWIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a widget is auto-cancelled\
          \ due to conversion problem <br>,\nWIDGET_ALL : All the supported widget\
          \ events for Webhooks"
        items:
          type: "string"
          enum:
          - "AGREEMENT_CREATED"
          - "AGREEMENT_ACTION_DELEGATED"
          - "AGREEMENT_RECALLED"
          - "AGREEMENT_REJECTED"
          - "AGREEMENT_EXPIRED"
          - "AGREEMENT_ACTION_COMPLETED"
          - "AGREEMENT_WORKFLOW_COMPLETED"
          - "AGREEMENT_EMAIL_VIEWED"
          - "AGREEMENT_MODIFIED"
          - "AGREEMENT_SHARED"
          - "AGREEMENT_VAULTED"
          - "AGREEMENT_ACTION_REQUESTED"
          - "AGREEMENT_ACTION_REPLACED_SIGNER"
          - "AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM"
          - "AGREEMENT_DOCUMENTS_DELETED"
          - "AGREEMENT_EMAIL_BOUNCED"
          - "AGREEMENT_KBA_AUTHENTICATED"
          - "AGREEMENT_OFFLINE_SYNC"
          - "AGREEMENT_USER_ACK_AGREEMENT_MODIFIED"
          - "AGREEMENT_UPLOADED_BY_SENDER"
          - "AGREEMENT_WEB_IDENTITY_AUTHENTICATED"
          - "AGREEMENT_ALL"
          - "MEGASIGN_CREATED"
          - "MEGASIGN_RECALLED"
          - "MEGASIGN_SHARED"
          - "MEGASIGN_ALL"
          - "WIDGET_CREATED"
          - "WIDGET_MODIFIED"
          - "WIDGET_SHARED"
          - "WIDGET_ENABLED"
          - "WIDGET_DISABLED"
          - "WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM"
          - "WIDGET_ALL"
      webhookUrlInfo:
        description: "Info of webhook url"
        $ref: "#/definitions/WebhookUrlInfo"
    example:
      resourceId: "resourceId"
      webhookUrlInfo:
        url: "url"
      webhookConditionalParams:
        webhookWidgetEvents:
          includeDetailedInfo: true
          includeParticipantsInfo: true
          includeDocumentsInfo: true
        webhookMegaSignEvents:
          includeDetailedInfo: true
        webhookAgreementEvents:
          includeDetailedInfo: true
          includeParticipantsInfo: true
          includeSignedDocuments: true
          includeDocumentsInfo: true
      created: "2000-01-23"
      webhookSubscriptionEvents:
      - "AGREEMENT_CREATED"
      - "AGREEMENT_CREATED"
      applicationDisplayName: "applicationDisplayName"
      scope: "ACCOUNT"
      name: "name"
      id: "id"
      lastModified: "2000-01-23"
      state: "ACTIVE"
      applicationName: "applicationName"
      resourceType: "AGREEMENT"
      status: "ACTIVE"
  WebhookMegaSignEvents:
    properties:
      includeDetailedInfo:
        type: "boolean"
        description: "Determines whether megaign detailed info will be returned in\
          \ the response payload"
    example:
      includeDetailedInfo: true
  WebhookStateInfo:
    required:
    - "state"
    properties:
      state:
        type: "string"
        description: "The state to which the webhook should be changed to"
        enum:
        - "ACTIVE"
        - "INACTIVE"
  WebhookUrlInfo:
    required:
    - "url"
    properties:
      url:
        type: "string"
        description: "Info of webhook url"
    example:
      url: "url"
  WebhookWidgetEvents:
    properties:
      includeDetailedInfo:
        type: "boolean"
        description: "Determines whether agreement detailed info will be returned\
          \ in the response payload"
      includeDocumentsInfo:
        type: "boolean"
        description: "Determines whether document info will be returned in the response\
          \ payload"
      includeParticipantsInfo:
        type: "boolean"
        description: "Determines whether participants info will be returned in the\
          \ response payload"
    example:
      includeDetailedInfo: true
      includeParticipantsInfo: true
      includeDocumentsInfo: true
